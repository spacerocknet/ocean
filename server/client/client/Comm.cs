// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace comm {

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	public static partial class Comm {

		#region Extension registration
		public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
		}
		#endregion
		#region Static variables
		internal static pbd::MessageDescriptor internal__static_comm_Service__Descriptor;
		internal static pb::FieldAccess.FieldAccessorTable<global::comm.Service, global::comm.Service.Builder> internal__static_comm_Service__FieldAccessorTable;
		internal static pbd::MessageDescriptor internal__static_comm_Error__Descriptor;
		internal static pb::FieldAccess.FieldAccessorTable<global::comm.Error, global::comm.Error.Builder> internal__static_comm_Error__FieldAccessorTable;
		internal static pbd::MessageDescriptor internal__static_comm_HelloRequest__Descriptor;
		internal static pb::FieldAccess.FieldAccessorTable<global::comm.HelloRequest, global::comm.HelloRequest.Builder> internal__static_comm_HelloRequest__FieldAccessorTable;
		internal static pbd::MessageDescriptor internal__static_comm_HelloReply__Descriptor;
		internal static pb::FieldAccess.FieldAccessorTable<global::comm.HelloReply, global::comm.HelloReply.Builder> internal__static_comm_HelloReply__FieldAccessorTable;
		internal static pbd::MessageDescriptor internal__static_comm_PingpongRequest__Descriptor;
		internal static pb::FieldAccess.FieldAccessorTable<global::comm.PingpongRequest, global::comm.PingpongRequest.Builder> internal__static_comm_PingpongRequest__FieldAccessorTable;
		internal static pbd::MessageDescriptor internal__static_comm_PingpongReply__Descriptor;
		internal static pb::FieldAccess.FieldAccessorTable<global::comm.PingpongReply, global::comm.PingpongReply.Builder> internal__static_comm_PingpongReply__FieldAccessorTable;
		#endregion
		#region Descriptor
		public static pbd::FileDescriptor Descriptor {
			get { return descriptor; }
		}
		private static pbd::FileDescriptor descriptor;

		static Comm() {
			byte[] descriptorData = global::System.Convert.FromBase64String(
				"Cgpjb21tLnByb3RvEgRjb21tIioKB1NlcnZpY2UiHwoEVHlwZRIJCgVIRUxM" + 
				"TxABEgwKCFBJTkdQT05HEAIiLAoFRXJyb3IiIwoEVHlwZRIGCgJPSxAAEhMK" + 
				"D0lOVkFMSURfUkVRVUVTVBACIhwKDEhlbGxvUmVxdWVzdBIMCgRuYW1lGAEg" + 
				"AigJIigKCkhlbGxvUmVwbHkSDAoEdHlwZRgBIAIoDRIMCgR0ZXh0GAIgAigJ" + 
				"Ih8KD1Bpbmdwb25nUmVxdWVzdBIMCgR0ZXh0GAEgAigJIisKDVBpbmdwb25n" + 
				"UmVwbHkSDAoEdHlwZRgBIAIoDRIMCgR0ZXh0GAIgAigJ");
			pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
				descriptor = root;
				internal__static_comm_Service__Descriptor = Descriptor.MessageTypes[0];
				internal__static_comm_Service__FieldAccessorTable = 
				new pb::FieldAccess.FieldAccessorTable<global::comm.Service, global::comm.Service.Builder>(internal__static_comm_Service__Descriptor,
				                                                                                           new string[] { });
				internal__static_comm_Error__Descriptor = Descriptor.MessageTypes[1];
				internal__static_comm_Error__FieldAccessorTable = 
				new pb::FieldAccess.FieldAccessorTable<global::comm.Error, global::comm.Error.Builder>(internal__static_comm_Error__Descriptor,
				                                                                                       new string[] { });
				internal__static_comm_HelloRequest__Descriptor = Descriptor.MessageTypes[2];
				internal__static_comm_HelloRequest__FieldAccessorTable = 
				new pb::FieldAccess.FieldAccessorTable<global::comm.HelloRequest, global::comm.HelloRequest.Builder>(internal__static_comm_HelloRequest__Descriptor,
				                                                                                                     new string[] { "Name", });
				internal__static_comm_HelloReply__Descriptor = Descriptor.MessageTypes[3];
				internal__static_comm_HelloReply__FieldAccessorTable = 
				new pb::FieldAccess.FieldAccessorTable<global::comm.HelloReply, global::comm.HelloReply.Builder>(internal__static_comm_HelloReply__Descriptor,
				                                                                                                 new string[] { "Type", "Text", });
				internal__static_comm_PingpongRequest__Descriptor = Descriptor.MessageTypes[4];
				internal__static_comm_PingpongRequest__FieldAccessorTable = 
				new pb::FieldAccess.FieldAccessorTable<global::comm.PingpongRequest, global::comm.PingpongRequest.Builder>(internal__static_comm_PingpongRequest__Descriptor,
				                                                                                                           new string[] { "Text", });
				internal__static_comm_PingpongReply__Descriptor = Descriptor.MessageTypes[5];
				internal__static_comm_PingpongReply__FieldAccessorTable = 
				new pb::FieldAccess.FieldAccessorTable<global::comm.PingpongReply, global::comm.PingpongReply.Builder>(internal__static_comm_PingpongReply__Descriptor,
				                                                                                                       new string[] { "Type", "Text", });
				return null;
			};
			pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
			                                                   new pbd::FileDescriptor[] {
			}, assigner);
		}
		#endregion

	}
	#region Messages
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	public sealed partial class Service : pb::GeneratedMessage<Service, Service.Builder> {
		private Service() { }
		private static readonly Service defaultInstance = new Service().MakeReadOnly();
		private static readonly string[] _serviceFieldNames = new string[] {  };
		private static readonly uint[] _serviceFieldTags = new uint[] {  };
		public static Service DefaultInstance {
			get { return defaultInstance; }
		}

		public override Service DefaultInstanceForType {
			get { return DefaultInstance; }
		}

		protected override Service ThisMessage {
			get { return this; }
		}

		public static pbd::MessageDescriptor Descriptor {
			get { return global::comm.Comm.internal__static_comm_Service__Descriptor; }
		}

		protected override pb::FieldAccess.FieldAccessorTable<Service, Service.Builder> InternalFieldAccessors {
			get { return global::comm.Comm.internal__static_comm_Service__FieldAccessorTable; }
		}

		#region Nested types
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class Types {
			public enum Type {
				HELLO = 1,
				PINGPONG = 2,
			}

		}
		#endregion

		public override bool IsInitialized {
			get {
				return true;
			}
		}

		public override void WriteTo(pb::ICodedOutputStream output) {
			int size = SerializedSize;
			string[] field_names = _serviceFieldNames;
			UnknownFields.WriteTo(output);
		}

		private int memoizedSerializedSize = -1;
		public override int SerializedSize {
			get {
				int size = memoizedSerializedSize;
				if (size != -1) return size;

				size = 0;
				size += UnknownFields.SerializedSize;
				memoizedSerializedSize = size;
				return size;
			}
		}

		public static Service ParseFrom(pb::ByteString data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static Service ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static Service ParseFrom(byte[] data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static Service ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static Service ParseFrom(global::System.IO.Stream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static Service ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		public static Service ParseDelimitedFrom(global::System.IO.Stream input) {
			return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
		}
		public static Service ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
		}
		public static Service ParseFrom(pb::ICodedInputStream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static Service ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		private Service MakeReadOnly() {
			return this;
		}

		public static Builder CreateBuilder() { return new Builder(); }
		public override Builder ToBuilder() { return CreateBuilder(this); }
		public override Builder CreateBuilderForType() { return new Builder(); }
		public static Builder CreateBuilder(Service prototype) {
			return new Builder(prototype);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public sealed partial class Builder : pb::GeneratedBuilder<Service, Builder> {
			protected override Builder ThisBuilder {
				get { return this; }
			}
			public Builder() {
				result = DefaultInstance;
				resultIsReadOnly = true;
			}
			internal Builder(Service cloneFrom) {
				result = cloneFrom;
				resultIsReadOnly = true;
			}

			private bool resultIsReadOnly;
			private Service result;

			private Service PrepareBuilder() {
				if (resultIsReadOnly) {
					Service original = result;
					result = new Service();
					resultIsReadOnly = false;
					MergeFrom(original);
				}
				return result;
			}

			public override bool IsInitialized {
				get { return result.IsInitialized; }
			}

			protected override Service MessageBeingBuilt {
				get { return PrepareBuilder(); }
			}

			public override Builder Clear() {
				result = DefaultInstance;
				resultIsReadOnly = true;
				return this;
			}

			public override Builder Clone() {
				if (resultIsReadOnly) {
					return new Builder(result);
				} else {
					return new Builder().MergeFrom(result);
				}
			}

			public override pbd::MessageDescriptor DescriptorForType {
				get { return global::comm.Service.Descriptor; }
			}

			public override Service DefaultInstanceForType {
				get { return global::comm.Service.DefaultInstance; }
			}

			public override Service BuildPartial() {
				if (resultIsReadOnly) {
					return result;
				}
				resultIsReadOnly = true;
				return result.MakeReadOnly();
			}

			public override Builder MergeFrom(pb::IMessage other) {
				if (other is Service) {
					return MergeFrom((Service) other);
				} else {
					base.MergeFrom(other);
					return this;
				}
			}

			public override Builder MergeFrom(Service other) {
				if (other == global::comm.Service.DefaultInstance) return this;
				PrepareBuilder();
				this.MergeUnknownFields(other.UnknownFields);
				return this;
			}

			public override Builder MergeFrom(pb::ICodedInputStream input) {
				return MergeFrom(input, pb::ExtensionRegistry.Empty);
			}

			public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
				PrepareBuilder();
				pb::UnknownFieldSet.Builder unknownFields = null;
				uint tag;
				string field_name;
				while (input.ReadTag(out tag, out field_name)) {
					if(tag == 0 && field_name != null) {
						int field_ordinal = global::System.Array.BinarySearch(_serviceFieldNames, field_name, global::System.StringComparer.Ordinal);
						if(field_ordinal >= 0)
							tag = _serviceFieldTags[field_ordinal];
						else {
							if (unknownFields == null) {
								unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
							}
							ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
							continue;
						}
					}
					switch (tag) {
						case 0: {
						throw pb::InvalidProtocolBufferException.InvalidTag();
					}
						default: {
						if (pb::WireFormat.IsEndGroupTag(tag)) {
							if (unknownFields != null) {
								this.UnknownFields = unknownFields.Build();
							}
							return this;
						}
						if (unknownFields == null) {
							unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
						}
						ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
						break;
					}
					}
				}

				if (unknownFields != null) {
					this.UnknownFields = unknownFields.Build();
				}
				return this;
			}

		}
		static Service() {
			object.ReferenceEquals(global::comm.Comm.Descriptor, null);
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	public sealed partial class Error : pb::GeneratedMessage<Error, Error.Builder> {
		private Error() { }
		private static readonly Error defaultInstance = new Error().MakeReadOnly();
		private static readonly string[] _errorFieldNames = new string[] {  };
		private static readonly uint[] _errorFieldTags = new uint[] {  };
		public static Error DefaultInstance {
			get { return defaultInstance; }
		}

		public override Error DefaultInstanceForType {
			get { return DefaultInstance; }
		}

		protected override Error ThisMessage {
			get { return this; }
		}

		public static pbd::MessageDescriptor Descriptor {
			get { return global::comm.Comm.internal__static_comm_Error__Descriptor; }
		}

		protected override pb::FieldAccess.FieldAccessorTable<Error, Error.Builder> InternalFieldAccessors {
			get { return global::comm.Comm.internal__static_comm_Error__FieldAccessorTable; }
		}

		#region Nested types
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class Types {
			public enum Type {
				OK = 0,
				INVALID_REQUEST = 2,
			}

		}
		#endregion

		public override bool IsInitialized {
			get {
				return true;
			}
		}

		public override void WriteTo(pb::ICodedOutputStream output) {
			int size = SerializedSize;
			string[] field_names = _errorFieldNames;
			UnknownFields.WriteTo(output);
		}

		private int memoizedSerializedSize = -1;
		public override int SerializedSize {
			get {
				int size = memoizedSerializedSize;
				if (size != -1) return size;

				size = 0;
				size += UnknownFields.SerializedSize;
				memoizedSerializedSize = size;
				return size;
			}
		}

		public static Error ParseFrom(pb::ByteString data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static Error ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static Error ParseFrom(byte[] data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static Error ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static Error ParseFrom(global::System.IO.Stream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static Error ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		public static Error ParseDelimitedFrom(global::System.IO.Stream input) {
			return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
		}
		public static Error ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
		}
		public static Error ParseFrom(pb::ICodedInputStream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static Error ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		private Error MakeReadOnly() {
			return this;
		}

		public static Builder CreateBuilder() { return new Builder(); }
		public override Builder ToBuilder() { return CreateBuilder(this); }
		public override Builder CreateBuilderForType() { return new Builder(); }
		public static Builder CreateBuilder(Error prototype) {
			return new Builder(prototype);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public sealed partial class Builder : pb::GeneratedBuilder<Error, Builder> {
			protected override Builder ThisBuilder {
				get { return this; }
			}
			public Builder() {
				result = DefaultInstance;
				resultIsReadOnly = true;
			}
			internal Builder(Error cloneFrom) {
				result = cloneFrom;
				resultIsReadOnly = true;
			}

			private bool resultIsReadOnly;
			private Error result;

			private Error PrepareBuilder() {
				if (resultIsReadOnly) {
					Error original = result;
					result = new Error();
					resultIsReadOnly = false;
					MergeFrom(original);
				}
				return result;
			}

			public override bool IsInitialized {
				get { return result.IsInitialized; }
			}

			protected override Error MessageBeingBuilt {
				get { return PrepareBuilder(); }
			}

			public override Builder Clear() {
				result = DefaultInstance;
				resultIsReadOnly = true;
				return this;
			}

			public override Builder Clone() {
				if (resultIsReadOnly) {
					return new Builder(result);
				} else {
					return new Builder().MergeFrom(result);
				}
			}

			public override pbd::MessageDescriptor DescriptorForType {
				get { return global::comm.Error.Descriptor; }
			}

			public override Error DefaultInstanceForType {
				get { return global::comm.Error.DefaultInstance; }
			}

			public override Error BuildPartial() {
				if (resultIsReadOnly) {
					return result;
				}
				resultIsReadOnly = true;
				return result.MakeReadOnly();
			}

			public override Builder MergeFrom(pb::IMessage other) {
				if (other is Error) {
					return MergeFrom((Error) other);
				} else {
					base.MergeFrom(other);
					return this;
				}
			}

			public override Builder MergeFrom(Error other) {
				if (other == global::comm.Error.DefaultInstance) return this;
				PrepareBuilder();
				this.MergeUnknownFields(other.UnknownFields);
				return this;
			}

			public override Builder MergeFrom(pb::ICodedInputStream input) {
				return MergeFrom(input, pb::ExtensionRegistry.Empty);
			}

			public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
				PrepareBuilder();
				pb::UnknownFieldSet.Builder unknownFields = null;
				uint tag;
				string field_name;
				while (input.ReadTag(out tag, out field_name)) {
					if(tag == 0 && field_name != null) {
						int field_ordinal = global::System.Array.BinarySearch(_errorFieldNames, field_name, global::System.StringComparer.Ordinal);
						if(field_ordinal >= 0)
							tag = _errorFieldTags[field_ordinal];
						else {
							if (unknownFields == null) {
								unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
							}
							ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
							continue;
						}
					}
					switch (tag) {
						case 0: {
						throw pb::InvalidProtocolBufferException.InvalidTag();
					}
						default: {
						if (pb::WireFormat.IsEndGroupTag(tag)) {
							if (unknownFields != null) {
								this.UnknownFields = unknownFields.Build();
							}
							return this;
						}
						if (unknownFields == null) {
							unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
						}
						ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
						break;
					}
					}
				}

				if (unknownFields != null) {
					this.UnknownFields = unknownFields.Build();
				}
				return this;
			}

		}
		static Error() {
			object.ReferenceEquals(global::comm.Comm.Descriptor, null);
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	public sealed partial class HelloRequest : pb::GeneratedMessage<HelloRequest, HelloRequest.Builder> {
		private HelloRequest() { }
		private static readonly HelloRequest defaultInstance = new HelloRequest().MakeReadOnly();
		private static readonly string[] _helloRequestFieldNames = new string[] { "name" };
		private static readonly uint[] _helloRequestFieldTags = new uint[] { 10 };
		public static HelloRequest DefaultInstance {
			get { return defaultInstance; }
		}

		public override HelloRequest DefaultInstanceForType {
			get { return DefaultInstance; }
		}

		protected override HelloRequest ThisMessage {
			get { return this; }
		}

		public static pbd::MessageDescriptor Descriptor {
			get { return global::comm.Comm.internal__static_comm_HelloRequest__Descriptor; }
		}

		protected override pb::FieldAccess.FieldAccessorTable<HelloRequest, HelloRequest.Builder> InternalFieldAccessors {
			get { return global::comm.Comm.internal__static_comm_HelloRequest__FieldAccessorTable; }
		}

		public const int NameFieldNumber = 1;
		private bool hasName;
		private string name_ = "";
		public bool HasName {
			get { return hasName; }
		}
		public string Name {
			get { return name_; }
		}

		public override bool IsInitialized {
			get {
				if (!hasName) return false;
				return true;
			}
		}

		public override void WriteTo(pb::ICodedOutputStream output) {
			int size = SerializedSize;
			string[] field_names = _helloRequestFieldNames;
			if (hasName) {
				output.WriteString(1, field_names[0], Name);
			}
			UnknownFields.WriteTo(output);
		}

		private int memoizedSerializedSize = -1;
		public override int SerializedSize {
			get {
				int size = memoizedSerializedSize;
				if (size != -1) return size;

				size = 0;
				if (hasName) {
					size += pb::CodedOutputStream.ComputeStringSize(1, Name);
				}
				size += UnknownFields.SerializedSize;
				memoizedSerializedSize = size;
				return size;
			}
		}

		public static HelloRequest ParseFrom(pb::ByteString data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static HelloRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static HelloRequest ParseFrom(byte[] data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static HelloRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static HelloRequest ParseFrom(global::System.IO.Stream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static HelloRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		public static HelloRequest ParseDelimitedFrom(global::System.IO.Stream input) {
			return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
		}
		public static HelloRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
		}
		public static HelloRequest ParseFrom(pb::ICodedInputStream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static HelloRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		private HelloRequest MakeReadOnly() {
			return this;
		}

		public static Builder CreateBuilder() { return new Builder(); }
		public override Builder ToBuilder() { return CreateBuilder(this); }
		public override Builder CreateBuilderForType() { return new Builder(); }
		public static Builder CreateBuilder(HelloRequest prototype) {
			return new Builder(prototype);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public sealed partial class Builder : pb::GeneratedBuilder<HelloRequest, Builder> {
			protected override Builder ThisBuilder {
				get { return this; }
			}
			public Builder() {
				result = DefaultInstance;
				resultIsReadOnly = true;
			}
			internal Builder(HelloRequest cloneFrom) {
				result = cloneFrom;
				resultIsReadOnly = true;
			}

			private bool resultIsReadOnly;
			private HelloRequest result;

			private HelloRequest PrepareBuilder() {
				if (resultIsReadOnly) {
					HelloRequest original = result;
					result = new HelloRequest();
					resultIsReadOnly = false;
					MergeFrom(original);
				}
				return result;
			}

			public override bool IsInitialized {
				get { return result.IsInitialized; }
			}

			protected override HelloRequest MessageBeingBuilt {
				get { return PrepareBuilder(); }
			}

			public override Builder Clear() {
				result = DefaultInstance;
				resultIsReadOnly = true;
				return this;
			}

			public override Builder Clone() {
				if (resultIsReadOnly) {
					return new Builder(result);
				} else {
					return new Builder().MergeFrom(result);
				}
			}

			public override pbd::MessageDescriptor DescriptorForType {
				get { return global::comm.HelloRequest.Descriptor; }
			}

			public override HelloRequest DefaultInstanceForType {
				get { return global::comm.HelloRequest.DefaultInstance; }
			}

			public override HelloRequest BuildPartial() {
				if (resultIsReadOnly) {
					return result;
				}
				resultIsReadOnly = true;
				return result.MakeReadOnly();
			}

			public override Builder MergeFrom(pb::IMessage other) {
				if (other is HelloRequest) {
					return MergeFrom((HelloRequest) other);
				} else {
					base.MergeFrom(other);
					return this;
				}
			}

			public override Builder MergeFrom(HelloRequest other) {
				if (other == global::comm.HelloRequest.DefaultInstance) return this;
				PrepareBuilder();
				if (other.HasName) {
					Name = other.Name;
				}
				this.MergeUnknownFields(other.UnknownFields);
				return this;
			}

			public override Builder MergeFrom(pb::ICodedInputStream input) {
				return MergeFrom(input, pb::ExtensionRegistry.Empty);
			}

			public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
				PrepareBuilder();
				pb::UnknownFieldSet.Builder unknownFields = null;
				uint tag;
				string field_name;
				while (input.ReadTag(out tag, out field_name)) {
					if(tag == 0 && field_name != null) {
						int field_ordinal = global::System.Array.BinarySearch(_helloRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
						if(field_ordinal >= 0)
							tag = _helloRequestFieldTags[field_ordinal];
						else {
							if (unknownFields == null) {
								unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
							}
							ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
							continue;
						}
					}
					switch (tag) {
						case 0: {
						throw pb::InvalidProtocolBufferException.InvalidTag();
					}
						default: {
						if (pb::WireFormat.IsEndGroupTag(tag)) {
							if (unknownFields != null) {
								this.UnknownFields = unknownFields.Build();
							}
							return this;
						}
						if (unknownFields == null) {
							unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
						}
						ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
						break;
					}
						case 10: {
						result.hasName = input.ReadString(ref result.name_);
						break;
					}
					}
				}

				if (unknownFields != null) {
					this.UnknownFields = unknownFields.Build();
				}
				return this;
			}


			public bool HasName {
				get { return result.hasName; }
			}
			public string Name {
				get { return result.Name; }
				set { SetName(value); }
			}
			public Builder SetName(string value) {
				pb::ThrowHelper.ThrowIfNull(value, "value");
				PrepareBuilder();
				result.hasName = true;
				result.name_ = value;
				return this;
			}
			public Builder ClearName() {
				PrepareBuilder();
				result.hasName = false;
				result.name_ = "";
				return this;
			}
		}
		static HelloRequest() {
			object.ReferenceEquals(global::comm.Comm.Descriptor, null);
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	public sealed partial class HelloReply : pb::GeneratedMessage<HelloReply, HelloReply.Builder> {
		private HelloReply() { }
		private static readonly HelloReply defaultInstance = new HelloReply().MakeReadOnly();
		private static readonly string[] _helloReplyFieldNames = new string[] { "text", "type" };
		private static readonly uint[] _helloReplyFieldTags = new uint[] { 18, 8 };
		public static HelloReply DefaultInstance {
			get { return defaultInstance; }
		}

		public override HelloReply DefaultInstanceForType {
			get { return DefaultInstance; }
		}

		protected override HelloReply ThisMessage {
			get { return this; }
		}

		public static pbd::MessageDescriptor Descriptor {
			get { return global::comm.Comm.internal__static_comm_HelloReply__Descriptor; }
		}

		protected override pb::FieldAccess.FieldAccessorTable<HelloReply, HelloReply.Builder> InternalFieldAccessors {
			get { return global::comm.Comm.internal__static_comm_HelloReply__FieldAccessorTable; }
		}

		public const int TypeFieldNumber = 1;
		private bool hasType;
		private uint type_;
		public bool HasType {
			get { return hasType; }
		}
		[global::System.CLSCompliant(false)]
		public uint Type {
			get { return type_; }
		}

		public const int TextFieldNumber = 2;
		private bool hasText;
		private string text_ = "";
		public bool HasText {
			get { return hasText; }
		}
		public string Text {
			get { return text_; }
		}

		public override bool IsInitialized {
			get {
				if (!hasType) return false;
				if (!hasText) return false;
				return true;
			}
		}

		public override void WriteTo(pb::ICodedOutputStream output) {
			int size = SerializedSize;
			string[] field_names = _helloReplyFieldNames;
			if (hasType) {
				output.WriteUInt32(1, field_names[1], Type);
			}
			if (hasText) {
				output.WriteString(2, field_names[0], Text);
			}
			UnknownFields.WriteTo(output);
		}

		private int memoizedSerializedSize = -1;
		public override int SerializedSize {
			get {
				int size = memoizedSerializedSize;
				if (size != -1) return size;

				size = 0;
				if (hasType) {
					size += pb::CodedOutputStream.ComputeUInt32Size(1, Type);
				}
				if (hasText) {
					size += pb::CodedOutputStream.ComputeStringSize(2, Text);
				}
				size += UnknownFields.SerializedSize;
				memoizedSerializedSize = size;
				return size;
			}
		}

		public static HelloReply ParseFrom(pb::ByteString data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static HelloReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static HelloReply ParseFrom(byte[] data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static HelloReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static HelloReply ParseFrom(global::System.IO.Stream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static HelloReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		public static HelloReply ParseDelimitedFrom(global::System.IO.Stream input) {
			return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
		}
		public static HelloReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
		}
		public static HelloReply ParseFrom(pb::ICodedInputStream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static HelloReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		private HelloReply MakeReadOnly() {
			return this;
		}

		public static Builder CreateBuilder() { return new Builder(); }
		public override Builder ToBuilder() { return CreateBuilder(this); }
		public override Builder CreateBuilderForType() { return new Builder(); }
		public static Builder CreateBuilder(HelloReply prototype) {
			return new Builder(prototype);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public sealed partial class Builder : pb::GeneratedBuilder<HelloReply, Builder> {
			protected override Builder ThisBuilder {
				get { return this; }
			}
			public Builder() {
				result = DefaultInstance;
				resultIsReadOnly = true;
			}
			internal Builder(HelloReply cloneFrom) {
				result = cloneFrom;
				resultIsReadOnly = true;
			}

			private bool resultIsReadOnly;
			private HelloReply result;

			private HelloReply PrepareBuilder() {
				if (resultIsReadOnly) {
					HelloReply original = result;
					result = new HelloReply();
					resultIsReadOnly = false;
					MergeFrom(original);
				}
				return result;
			}

			public override bool IsInitialized {
				get { return result.IsInitialized; }
			}

			protected override HelloReply MessageBeingBuilt {
				get { return PrepareBuilder(); }
			}

			public override Builder Clear() {
				result = DefaultInstance;
				resultIsReadOnly = true;
				return this;
			}

			public override Builder Clone() {
				if (resultIsReadOnly) {
					return new Builder(result);
				} else {
					return new Builder().MergeFrom(result);
				}
			}

			public override pbd::MessageDescriptor DescriptorForType {
				get { return global::comm.HelloReply.Descriptor; }
			}

			public override HelloReply DefaultInstanceForType {
				get { return global::comm.HelloReply.DefaultInstance; }
			}

			public override HelloReply BuildPartial() {
				if (resultIsReadOnly) {
					return result;
				}
				resultIsReadOnly = true;
				return result.MakeReadOnly();
			}

			public override Builder MergeFrom(pb::IMessage other) {
				if (other is HelloReply) {
					return MergeFrom((HelloReply) other);
				} else {
					base.MergeFrom(other);
					return this;
				}
			}

			public override Builder MergeFrom(HelloReply other) {
				if (other == global::comm.HelloReply.DefaultInstance) return this;
				PrepareBuilder();
				if (other.HasType) {
					Type = other.Type;
				}
				if (other.HasText) {
					Text = other.Text;
				}
				this.MergeUnknownFields(other.UnknownFields);
				return this;
			}

			public override Builder MergeFrom(pb::ICodedInputStream input) {
				return MergeFrom(input, pb::ExtensionRegistry.Empty);
			}

			public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
				PrepareBuilder();
				pb::UnknownFieldSet.Builder unknownFields = null;
				uint tag;
				string field_name;
				while (input.ReadTag(out tag, out field_name)) {
					if(tag == 0 && field_name != null) {
						int field_ordinal = global::System.Array.BinarySearch(_helloReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
						if(field_ordinal >= 0)
							tag = _helloReplyFieldTags[field_ordinal];
						else {
							if (unknownFields == null) {
								unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
							}
							ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
							continue;
						}
					}
					switch (tag) {
						case 0: {
						throw pb::InvalidProtocolBufferException.InvalidTag();
					}
						default: {
						if (pb::WireFormat.IsEndGroupTag(tag)) {
							if (unknownFields != null) {
								this.UnknownFields = unknownFields.Build();
							}
							return this;
						}
						if (unknownFields == null) {
							unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
						}
						ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
						break;
					}
						case 8: {
						result.hasType = input.ReadUInt32(ref result.type_);
						break;
					}
						case 18: {
						result.hasText = input.ReadString(ref result.text_);
						break;
					}
					}
				}

				if (unknownFields != null) {
					this.UnknownFields = unknownFields.Build();
				}
				return this;
			}


			public bool HasType {
				get { return result.hasType; }
			}
			[global::System.CLSCompliant(false)]
			public uint Type {
				get { return result.Type; }
				set { SetType(value); }
			}
			[global::System.CLSCompliant(false)]
			public Builder SetType(uint value) {
				PrepareBuilder();
				result.hasType = true;
				result.type_ = value;
				return this;
			}
			public Builder ClearType() {
				PrepareBuilder();
				result.hasType = false;
				result.type_ = 0;
				return this;
			}

			public bool HasText {
				get { return result.hasText; }
			}
			public string Text {
				get { return result.Text; }
				set { SetText(value); }
			}
			public Builder SetText(string value) {
				pb::ThrowHelper.ThrowIfNull(value, "value");
				PrepareBuilder();
				result.hasText = true;
				result.text_ = value;
				return this;
			}
			public Builder ClearText() {
				PrepareBuilder();
				result.hasText = false;
				result.text_ = "";
				return this;
			}
		}
		static HelloReply() {
			object.ReferenceEquals(global::comm.Comm.Descriptor, null);
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	public sealed partial class PingpongRequest : pb::GeneratedMessage<PingpongRequest, PingpongRequest.Builder> {
		private PingpongRequest() { }
		private static readonly PingpongRequest defaultInstance = new PingpongRequest().MakeReadOnly();
		private static readonly string[] _pingpongRequestFieldNames = new string[] { "text" };
		private static readonly uint[] _pingpongRequestFieldTags = new uint[] { 10 };
		public static PingpongRequest DefaultInstance {
			get { return defaultInstance; }
		}

		public override PingpongRequest DefaultInstanceForType {
			get { return DefaultInstance; }
		}

		protected override PingpongRequest ThisMessage {
			get { return this; }
		}

		public static pbd::MessageDescriptor Descriptor {
			get { return global::comm.Comm.internal__static_comm_PingpongRequest__Descriptor; }
		}

		protected override pb::FieldAccess.FieldAccessorTable<PingpongRequest, PingpongRequest.Builder> InternalFieldAccessors {
			get { return global::comm.Comm.internal__static_comm_PingpongRequest__FieldAccessorTable; }
		}

		public const int TextFieldNumber = 1;
		private bool hasText;
		private string text_ = "";
		public bool HasText {
			get { return hasText; }
		}
		public string Text {
			get { return text_; }
		}

		public override bool IsInitialized {
			get {
				if (!hasText) return false;
				return true;
			}
		}

		public override void WriteTo(pb::ICodedOutputStream output) {
			int size = SerializedSize;
			string[] field_names = _pingpongRequestFieldNames;
			if (hasText) {
				output.WriteString(1, field_names[0], Text);
			}
			UnknownFields.WriteTo(output);
		}

		private int memoizedSerializedSize = -1;
		public override int SerializedSize {
			get {
				int size = memoizedSerializedSize;
				if (size != -1) return size;

				size = 0;
				if (hasText) {
					size += pb::CodedOutputStream.ComputeStringSize(1, Text);
				}
				size += UnknownFields.SerializedSize;
				memoizedSerializedSize = size;
				return size;
			}
		}

		public static PingpongRequest ParseFrom(pb::ByteString data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static PingpongRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static PingpongRequest ParseFrom(byte[] data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static PingpongRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static PingpongRequest ParseFrom(global::System.IO.Stream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static PingpongRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		public static PingpongRequest ParseDelimitedFrom(global::System.IO.Stream input) {
			return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
		}
		public static PingpongRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
		}
		public static PingpongRequest ParseFrom(pb::ICodedInputStream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static PingpongRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		private PingpongRequest MakeReadOnly() {
			return this;
		}

		public static Builder CreateBuilder() { return new Builder(); }
		public override Builder ToBuilder() { return CreateBuilder(this); }
		public override Builder CreateBuilderForType() { return new Builder(); }
		public static Builder CreateBuilder(PingpongRequest prototype) {
			return new Builder(prototype);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public sealed partial class Builder : pb::GeneratedBuilder<PingpongRequest, Builder> {
			protected override Builder ThisBuilder {
				get { return this; }
			}
			public Builder() {
				result = DefaultInstance;
				resultIsReadOnly = true;
			}
			internal Builder(PingpongRequest cloneFrom) {
				result = cloneFrom;
				resultIsReadOnly = true;
			}

			private bool resultIsReadOnly;
			private PingpongRequest result;

			private PingpongRequest PrepareBuilder() {
				if (resultIsReadOnly) {
					PingpongRequest original = result;
					result = new PingpongRequest();
					resultIsReadOnly = false;
					MergeFrom(original);
				}
				return result;
			}

			public override bool IsInitialized {
				get { return result.IsInitialized; }
			}

			protected override PingpongRequest MessageBeingBuilt {
				get { return PrepareBuilder(); }
			}

			public override Builder Clear() {
				result = DefaultInstance;
				resultIsReadOnly = true;
				return this;
			}

			public override Builder Clone() {
				if (resultIsReadOnly) {
					return new Builder(result);
				} else {
					return new Builder().MergeFrom(result);
				}
			}

			public override pbd::MessageDescriptor DescriptorForType {
				get { return global::comm.PingpongRequest.Descriptor; }
			}

			public override PingpongRequest DefaultInstanceForType {
				get { return global::comm.PingpongRequest.DefaultInstance; }
			}

			public override PingpongRequest BuildPartial() {
				if (resultIsReadOnly) {
					return result;
				}
				resultIsReadOnly = true;
				return result.MakeReadOnly();
			}

			public override Builder MergeFrom(pb::IMessage other) {
				if (other is PingpongRequest) {
					return MergeFrom((PingpongRequest) other);
				} else {
					base.MergeFrom(other);
					return this;
				}
			}

			public override Builder MergeFrom(PingpongRequest other) {
				if (other == global::comm.PingpongRequest.DefaultInstance) return this;
				PrepareBuilder();
				if (other.HasText) {
					Text = other.Text;
				}
				this.MergeUnknownFields(other.UnknownFields);
				return this;
			}

			public override Builder MergeFrom(pb::ICodedInputStream input) {
				return MergeFrom(input, pb::ExtensionRegistry.Empty);
			}

			public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
				PrepareBuilder();
				pb::UnknownFieldSet.Builder unknownFields = null;
				uint tag;
				string field_name;
				while (input.ReadTag(out tag, out field_name)) {
					if(tag == 0 && field_name != null) {
						int field_ordinal = global::System.Array.BinarySearch(_pingpongRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
						if(field_ordinal >= 0)
							tag = _pingpongRequestFieldTags[field_ordinal];
						else {
							if (unknownFields == null) {
								unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
							}
							ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
							continue;
						}
					}
					switch (tag) {
						case 0: {
						throw pb::InvalidProtocolBufferException.InvalidTag();
					}
						default: {
						if (pb::WireFormat.IsEndGroupTag(tag)) {
							if (unknownFields != null) {
								this.UnknownFields = unknownFields.Build();
							}
							return this;
						}
						if (unknownFields == null) {
							unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
						}
						ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
						break;
					}
						case 10: {
						result.hasText = input.ReadString(ref result.text_);
						break;
					}
					}
				}

				if (unknownFields != null) {
					this.UnknownFields = unknownFields.Build();
				}
				return this;
			}


			public bool HasText {
				get { return result.hasText; }
			}
			public string Text {
				get { return result.Text; }
				set { SetText(value); }
			}
			public Builder SetText(string value) {
				pb::ThrowHelper.ThrowIfNull(value, "value");
				PrepareBuilder();
				result.hasText = true;
				result.text_ = value;
				return this;
			}
			public Builder ClearText() {
				PrepareBuilder();
				result.hasText = false;
				result.text_ = "";
				return this;
			}
		}
		static PingpongRequest() {
			object.ReferenceEquals(global::comm.Comm.Descriptor, null);
		}
	}

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	public sealed partial class PingpongReply : pb::GeneratedMessage<PingpongReply, PingpongReply.Builder> {
		private PingpongReply() { }
		private static readonly PingpongReply defaultInstance = new PingpongReply().MakeReadOnly();
		private static readonly string[] _pingpongReplyFieldNames = new string[] { "text", "type" };
		private static readonly uint[] _pingpongReplyFieldTags = new uint[] { 18, 8 };
		public static PingpongReply DefaultInstance {
			get { return defaultInstance; }
		}

		public override PingpongReply DefaultInstanceForType {
			get { return DefaultInstance; }
		}

		protected override PingpongReply ThisMessage {
			get { return this; }
		}

		public static pbd::MessageDescriptor Descriptor {
			get { return global::comm.Comm.internal__static_comm_PingpongReply__Descriptor; }
		}

		protected override pb::FieldAccess.FieldAccessorTable<PingpongReply, PingpongReply.Builder> InternalFieldAccessors {
			get { return global::comm.Comm.internal__static_comm_PingpongReply__FieldAccessorTable; }
		}

		public const int TypeFieldNumber = 1;
		private bool hasType;
		private uint type_;
		public bool HasType {
			get { return hasType; }
		}
		[global::System.CLSCompliant(false)]
		public uint Type {
			get { return type_; }
		}

		public const int TextFieldNumber = 2;
		private bool hasText;
		private string text_ = "";
		public bool HasText {
			get { return hasText; }
		}
		public string Text {
			get { return text_; }
		}

		public override bool IsInitialized {
			get {
				if (!hasType) return false;
				if (!hasText) return false;
				return true;
			}
		}

		public override void WriteTo(pb::ICodedOutputStream output) {
			int size = SerializedSize;
			string[] field_names = _pingpongReplyFieldNames;
			if (hasType) {
				output.WriteUInt32(1, field_names[1], Type);
			}
			if (hasText) {
				output.WriteString(2, field_names[0], Text);
			}
			UnknownFields.WriteTo(output);
		}

		private int memoizedSerializedSize = -1;
		public override int SerializedSize {
			get {
				int size = memoizedSerializedSize;
				if (size != -1) return size;

				size = 0;
				if (hasType) {
					size += pb::CodedOutputStream.ComputeUInt32Size(1, Type);
				}
				if (hasText) {
					size += pb::CodedOutputStream.ComputeStringSize(2, Text);
				}
				size += UnknownFields.SerializedSize;
				memoizedSerializedSize = size;
				return size;
			}
		}

		public static PingpongReply ParseFrom(pb::ByteString data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static PingpongReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static PingpongReply ParseFrom(byte[] data) {
			return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
		}
		public static PingpongReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
		}
		public static PingpongReply ParseFrom(global::System.IO.Stream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static PingpongReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		public static PingpongReply ParseDelimitedFrom(global::System.IO.Stream input) {
			return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
		}
		public static PingpongReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
			return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
		}
		public static PingpongReply ParseFrom(pb::ICodedInputStream input) {
			return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
		}
		public static PingpongReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
			return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
		}
		private PingpongReply MakeReadOnly() {
			return this;
		}

		public static Builder CreateBuilder() { return new Builder(); }
		public override Builder ToBuilder() { return CreateBuilder(this); }
		public override Builder CreateBuilderForType() { return new Builder(); }
		public static Builder CreateBuilder(PingpongReply prototype) {
			return new Builder(prototype);
		}

		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public sealed partial class Builder : pb::GeneratedBuilder<PingpongReply, Builder> {
			protected override Builder ThisBuilder {
				get { return this; }
			}
			public Builder() {
				result = DefaultInstance;
				resultIsReadOnly = true;
			}
			internal Builder(PingpongReply cloneFrom) {
				result = cloneFrom;
				resultIsReadOnly = true;
			}

			private bool resultIsReadOnly;
			private PingpongReply result;

			private PingpongReply PrepareBuilder() {
				if (resultIsReadOnly) {
					PingpongReply original = result;
					result = new PingpongReply();
					resultIsReadOnly = false;
					MergeFrom(original);
				}
				return result;
			}

			public override bool IsInitialized {
				get { return result.IsInitialized; }
			}

			protected override PingpongReply MessageBeingBuilt {
				get { return PrepareBuilder(); }
			}

			public override Builder Clear() {
				result = DefaultInstance;
				resultIsReadOnly = true;
				return this;
			}

			public override Builder Clone() {
				if (resultIsReadOnly) {
					return new Builder(result);
				} else {
					return new Builder().MergeFrom(result);
				}
			}

			public override pbd::MessageDescriptor DescriptorForType {
				get { return global::comm.PingpongReply.Descriptor; }
			}

			public override PingpongReply DefaultInstanceForType {
				get { return global::comm.PingpongReply.DefaultInstance; }
			}

			public override PingpongReply BuildPartial() {
				if (resultIsReadOnly) {
					return result;
				}
				resultIsReadOnly = true;
				return result.MakeReadOnly();
			}

			public override Builder MergeFrom(pb::IMessage other) {
				if (other is PingpongReply) {
					return MergeFrom((PingpongReply) other);
				} else {
					base.MergeFrom(other);
					return this;
				}
			}

			public override Builder MergeFrom(PingpongReply other) {
				if (other == global::comm.PingpongReply.DefaultInstance) return this;
				PrepareBuilder();
				if (other.HasType) {
					Type = other.Type;
				}
				if (other.HasText) {
					Text = other.Text;
				}
				this.MergeUnknownFields(other.UnknownFields);
				return this;
			}

			public override Builder MergeFrom(pb::ICodedInputStream input) {
				return MergeFrom(input, pb::ExtensionRegistry.Empty);
			}

			public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
				PrepareBuilder();
				pb::UnknownFieldSet.Builder unknownFields = null;
				uint tag;
				string field_name;
				while (input.ReadTag(out tag, out field_name)) {
					if(tag == 0 && field_name != null) {
						int field_ordinal = global::System.Array.BinarySearch(_pingpongReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
						if(field_ordinal >= 0)
							tag = _pingpongReplyFieldTags[field_ordinal];
						else {
							if (unknownFields == null) {
								unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
							}
							ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
							continue;
						}
					}
					switch (tag) {
						case 0: {
						throw pb::InvalidProtocolBufferException.InvalidTag();
					}
						default: {
						if (pb::WireFormat.IsEndGroupTag(tag)) {
							if (unknownFields != null) {
								this.UnknownFields = unknownFields.Build();
							}
							return this;
						}
						if (unknownFields == null) {
							unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
						}
						ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
						break;
					}
						case 8: {
						result.hasType = input.ReadUInt32(ref result.type_);
						break;
					}
						case 18: {
						result.hasText = input.ReadString(ref result.text_);
						break;
					}
					}
				}

				if (unknownFields != null) {
					this.UnknownFields = unknownFields.Build();
				}
				return this;
			}


			public bool HasType {
				get { return result.hasType; }
			}
			[global::System.CLSCompliant(false)]
			public uint Type {
				get { return result.Type; }
				set { SetType(value); }
			}
			[global::System.CLSCompliant(false)]
			public Builder SetType(uint value) {
				PrepareBuilder();
				result.hasType = true;
				result.type_ = value;
				return this;
			}
			public Builder ClearType() {
				PrepareBuilder();
				result.hasType = false;
				result.type_ = 0;
				return this;
			}

			public bool HasText {
				get { return result.hasText; }
			}
			public string Text {
				get { return result.Text; }
				set { SetText(value); }
			}
			public Builder SetText(string value) {
				pb::ThrowHelper.ThrowIfNull(value, "value");
				PrepareBuilder();
				result.hasText = true;
				result.text_ = value;
				return this;
			}
			public Builder ClearText() {
				PrepareBuilder();
				result.hasText = false;
				result.text_ = "";
				return this;
			}
		}
		static PingpongReply() {
			object.ReferenceEquals(global::comm.Comm.Descriptor, null);
		}
	}

	#endregion

}

#endregion Designer generated code