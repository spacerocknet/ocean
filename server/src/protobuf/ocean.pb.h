// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocean.proto

#ifndef PROTOBUF_ocean_2eproto__INCLUDED
#define PROTOBUF_ocean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "model.pb.h"
#include "type.pb.h"
// @@protoc_insertion_point(includes)

namespace ocean {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ocean_2eproto();
void protobuf_AssignDesc_ocean_2eproto();
void protobuf_ShutdownFile_ocean_2eproto();

class Player;
class Tictactoe;

enum Player_State {
  Player_State_REGISTED = 1,
  Player_State_ACTIVE = 2,
  Player_State_DELETED = 3
};
bool Player_State_IsValid(int value);
const Player_State Player_State_State_MIN = Player_State_REGISTED;
const Player_State Player_State_State_MAX = Player_State_DELETED;
const int Player_State_State_ARRAYSIZE = Player_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Player_State_descriptor();
inline const ::std::string& Player_State_Name(Player_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Player_State_descriptor(), value);
}
inline bool Player_State_Parse(
    const ::std::string& name, Player_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Player_State>(
    Player_State_descriptor(), name, value);
}
enum Tictactoe_State {
  Tictactoe_State_CREATED = 1,
  Tictactoe_State_PLAYING = 2,
  Tictactoe_State_ENDED = 3
};
bool Tictactoe_State_IsValid(int value);
const Tictactoe_State Tictactoe_State_State_MIN = Tictactoe_State_CREATED;
const Tictactoe_State Tictactoe_State_State_MAX = Tictactoe_State_ENDED;
const int Tictactoe_State_State_ARRAYSIZE = Tictactoe_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Tictactoe_State_descriptor();
inline const ::std::string& Tictactoe_State_Name(Tictactoe_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Tictactoe_State_descriptor(), value);
}
inline bool Tictactoe_State_Parse(
    const ::std::string& name, Tictactoe_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Tictactoe_State>(
    Tictactoe_State_descriptor(), name, value);
}
enum Tictactoe_Value {
  Tictactoe_Value_E = 1,
  Tictactoe_Value_X = 2,
  Tictactoe_Value_O = 3
};
bool Tictactoe_Value_IsValid(int value);
const Tictactoe_Value Tictactoe_Value_Value_MIN = Tictactoe_Value_E;
const Tictactoe_Value Tictactoe_Value_Value_MAX = Tictactoe_Value_O;
const int Tictactoe_Value_Value_ARRAYSIZE = Tictactoe_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* Tictactoe_Value_descriptor();
inline const ::std::string& Tictactoe_Value_Name(Tictactoe_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    Tictactoe_Value_descriptor(), value);
}
inline bool Tictactoe_Value_Parse(
    const ::std::string& name, Tictactoe_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Tictactoe_Value>(
    Tictactoe_Value_descriptor(), name, value);
}
// ===================================================================

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Player_State State;
  static const State REGISTED = Player_State_REGISTED;
  static const State ACTIVE = Player_State_ACTIVE;
  static const State DELETED = Player_State_DELETED;
  static inline bool State_IsValid(int value) {
    return Player_State_IsValid(value);
  }
  static const State State_MIN =
    Player_State_State_MIN;
  static const State State_MAX =
    Player_State_State_MAX;
  static const int State_ARRAYSIZE =
    Player_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Player_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Player_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Player_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string email = 1;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 1;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string avatar = 4;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  static const int kPLAYERFieldNumber = 4;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Entity,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Player >, 11, false >
    PLAYER;
  // @@protoc_insertion_point(class_scope:ocean.Player)
 private:
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_avatar();
  inline void clear_has_avatar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* email_;
  ::std::string* password_;
  ::std::string* name_;
  ::std::string* avatar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class Tictactoe : public ::google::protobuf::Message {
 public:
  Tictactoe();
  virtual ~Tictactoe();

  Tictactoe(const Tictactoe& from);

  inline Tictactoe& operator=(const Tictactoe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tictactoe& default_instance();

  void Swap(Tictactoe* other);

  // implements Message ----------------------------------------------

  Tictactoe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tictactoe& from);
  void MergeFrom(const Tictactoe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Tictactoe_State State;
  static const State CREATED = Tictactoe_State_CREATED;
  static const State PLAYING = Tictactoe_State_PLAYING;
  static const State ENDED = Tictactoe_State_ENDED;
  static inline bool State_IsValid(int value) {
    return Tictactoe_State_IsValid(value);
  }
  static const State State_MIN =
    Tictactoe_State_State_MIN;
  static const State State_MAX =
    Tictactoe_State_State_MAX;
  static const int State_ARRAYSIZE =
    Tictactoe_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Tictactoe_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Tictactoe_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Tictactoe_State_Parse(name, value);
  }

  typedef Tictactoe_Value Value;
  static const Value E = Tictactoe_Value_E;
  static const Value X = Tictactoe_Value_X;
  static const Value O = Tictactoe_Value_O;
  static inline bool Value_IsValid(int value) {
    return Tictactoe_Value_IsValid(value);
  }
  static const Value Value_MIN =
    Tictactoe_Value_Value_MIN;
  static const Value Value_MAX =
    Tictactoe_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    Tictactoe_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return Tictactoe_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return Tictactoe_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return Tictactoe_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes player1 = 2;
  inline bool has_player1() const;
  inline void clear_player1();
  static const int kPlayer1FieldNumber = 2;
  inline const ::std::string& player1() const;
  inline void set_player1(const ::std::string& value);
  inline void set_player1(const char* value);
  inline void set_player1(const void* value, size_t size);
  inline ::std::string* mutable_player1();
  inline ::std::string* release_player1();
  inline void set_allocated_player1(::std::string* player1);

  // optional bytes player2 = 3;
  inline bool has_player2() const;
  inline void clear_player2();
  static const int kPlayer2FieldNumber = 3;
  inline const ::std::string& player2() const;
  inline void set_player2(const ::std::string& value);
  inline void set_player2(const char* value);
  inline void set_player2(const void* value, size_t size);
  inline ::std::string* mutable_player2();
  inline ::std::string* release_player2();
  inline void set_allocated_player2(::std::string* player2);

  // required string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // repeated uint32 values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline ::google::protobuf::uint32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::uint32 value);
  inline void add_values(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_values();

  // required uint32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  static const int kTICTACTOEFieldNumber = 5;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Entity,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Tictactoe >, 11, false >
    TICTACTOE;
  // @@protoc_insertion_point(class_scope:ocean.Tictactoe)
 private:
  inline void set_has_player1();
  inline void clear_has_player1();
  inline void set_has_player2();
  inline void clear_has_player2();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player1_;
  ::std::string* player2_;
  ::std::string* ip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > values_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Tictactoe* default_instance_;
};
// ===================================================================


// ===================================================================

// Player

// required string email = 1;
inline bool Player::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Player::email() const {
  return *email_;
}
inline void Player::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Player::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Player::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Player::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool Player::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Player::password() const {
  return *password_;
}
inline void Player::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Player::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Player::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Player::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3;
inline bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Player::name() const {
  return *name_;
}
inline void Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string avatar = 4;
inline bool Player::has_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& Player::avatar() const {
  return *avatar_;
}
inline void Player::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Player::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Player::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* Player::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Tictactoe

// required bytes player1 = 2;
inline bool Tictactoe::has_player1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tictactoe::set_has_player1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tictactoe::clear_has_player1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tictactoe::clear_player1() {
  if (player1_ != &::google::protobuf::internal::kEmptyString) {
    player1_->clear();
  }
  clear_has_player1();
}
inline const ::std::string& Tictactoe::player1() const {
  return *player1_;
}
inline void Tictactoe::set_player1(const ::std::string& value) {
  set_has_player1();
  if (player1_ == &::google::protobuf::internal::kEmptyString) {
    player1_ = new ::std::string;
  }
  player1_->assign(value);
}
inline void Tictactoe::set_player1(const char* value) {
  set_has_player1();
  if (player1_ == &::google::protobuf::internal::kEmptyString) {
    player1_ = new ::std::string;
  }
  player1_->assign(value);
}
inline void Tictactoe::set_player1(const void* value, size_t size) {
  set_has_player1();
  if (player1_ == &::google::protobuf::internal::kEmptyString) {
    player1_ = new ::std::string;
  }
  player1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tictactoe::mutable_player1() {
  set_has_player1();
  if (player1_ == &::google::protobuf::internal::kEmptyString) {
    player1_ = new ::std::string;
  }
  return player1_;
}
inline ::std::string* Tictactoe::release_player1() {
  clear_has_player1();
  if (player1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player1_;
    player1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tictactoe::set_allocated_player1(::std::string* player1) {
  if (player1_ != &::google::protobuf::internal::kEmptyString) {
    delete player1_;
  }
  if (player1) {
    set_has_player1();
    player1_ = player1;
  } else {
    clear_has_player1();
    player1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes player2 = 3;
inline bool Tictactoe::has_player2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tictactoe::set_has_player2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tictactoe::clear_has_player2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tictactoe::clear_player2() {
  if (player2_ != &::google::protobuf::internal::kEmptyString) {
    player2_->clear();
  }
  clear_has_player2();
}
inline const ::std::string& Tictactoe::player2() const {
  return *player2_;
}
inline void Tictactoe::set_player2(const ::std::string& value) {
  set_has_player2();
  if (player2_ == &::google::protobuf::internal::kEmptyString) {
    player2_ = new ::std::string;
  }
  player2_->assign(value);
}
inline void Tictactoe::set_player2(const char* value) {
  set_has_player2();
  if (player2_ == &::google::protobuf::internal::kEmptyString) {
    player2_ = new ::std::string;
  }
  player2_->assign(value);
}
inline void Tictactoe::set_player2(const void* value, size_t size) {
  set_has_player2();
  if (player2_ == &::google::protobuf::internal::kEmptyString) {
    player2_ = new ::std::string;
  }
  player2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tictactoe::mutable_player2() {
  set_has_player2();
  if (player2_ == &::google::protobuf::internal::kEmptyString) {
    player2_ = new ::std::string;
  }
  return player2_;
}
inline ::std::string* Tictactoe::release_player2() {
  clear_has_player2();
  if (player2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player2_;
    player2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tictactoe::set_allocated_player2(::std::string* player2) {
  if (player2_ != &::google::protobuf::internal::kEmptyString) {
    delete player2_;
  }
  if (player2) {
    set_has_player2();
    player2_ = player2;
  } else {
    clear_has_player2();
    player2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 4;
inline bool Tictactoe::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tictactoe::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tictactoe::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tictactoe::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Tictactoe::ip() const {
  return *ip_;
}
inline void Tictactoe::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Tictactoe::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Tictactoe::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tictactoe::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Tictactoe::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tictactoe::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 values = 1;
inline int Tictactoe::values_size() const {
  return values_.size();
}
inline void Tictactoe::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::uint32 Tictactoe::values(int index) const {
  return values_.Get(index);
}
inline void Tictactoe::set_values(int index, ::google::protobuf::uint32 value) {
  values_.Set(index, value);
}
inline void Tictactoe::add_values(::google::protobuf::uint32 value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Tictactoe::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Tictactoe::mutable_values() {
  return &values_;
}

// required uint32 state = 5;
inline bool Tictactoe::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tictactoe::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tictactoe::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tictactoe::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 Tictactoe::state() const {
  return state_;
}
inline void Tictactoe::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ocean

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ocean::Player_State>() {
  return ::ocean::Player_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ocean::Tictactoe_State>() {
  return ::ocean::Tictactoe_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ocean::Tictactoe_Value>() {
  return ::ocean::Tictactoe_Value_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ocean_2eproto__INCLUDED
