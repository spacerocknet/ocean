// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocean.proto

#ifndef PROTOBUF_ocean_2eproto__INCLUDED
#define PROTOBUF_ocean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "model.pb.h"
#include "type.pb.h"
// @@protoc_insertion_point(includes)

namespace ocean {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ocean_2eproto();
void protobuf_AssignDesc_ocean_2eproto();
void protobuf_ShutdownFile_ocean_2eproto();

class Game;
class Session;
class Player;
class Administrator;
class Update;
class JoinSession;
class LeaveSession;
class UpdateSession;

// ===================================================================

class Game : public ::google::protobuf::Message {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game& default_instance();

  void Swap(Game* other);

  // implements Message ----------------------------------------------

  Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // required int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // required uint32 player_count = 4;
  inline bool has_player_count() const;
  inline void clear_player_count();
  static const int kPlayerCountFieldNumber = 4;
  inline ::google::protobuf::uint32 player_count() const;
  inline void set_player_count(::google::protobuf::uint32 value);

  static const int kGAMEFieldNumber = 4;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Entity,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Game >, 11, false >
    GAME;
  // @@protoc_insertion_point(class_scope:ocean.Game)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_player_count();
  inline void clear_has_player_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* description_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::uint32 player_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Game* default_instance_;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  void Swap(Session* other);

  // implements Message ----------------------------------------------

  Session* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes game = 1;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 1;
  inline const ::std::string& game() const;
  inline void set_game(const ::std::string& value);
  inline void set_game(const char* value);
  inline void set_game(const void* value, size_t size);
  inline ::std::string* mutable_game();
  inline ::std::string* release_game();
  inline void set_allocated_game(::std::string* game);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string code = 3;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 3;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  static const int kSESSIONFieldNumber = 5;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Entity,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Session >, 11, false >
    SESSION;
  // @@protoc_insertion_point(class_scope:ocean.Session)
 private:
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* game_;
  ::std::string* name_;
  ::std::string* code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Session* default_instance_;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string email = 2;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 2;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional bytes avatar = 4;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  static const int kPLAYERFieldNumber = 6;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Entity,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Player >, 11, false >
    PLAYER;
  // @@protoc_insertion_point(class_scope:ocean.Player)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_avatar();
  inline void clear_has_avatar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* email_;
  ::std::string* password_;
  ::std::string* avatar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class Administrator : public ::google::protobuf::Message {
 public:
  Administrator();
  virtual ~Administrator();

  Administrator(const Administrator& from);

  inline Administrator& operator=(const Administrator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Administrator& default_instance();

  void Swap(Administrator* other);

  // implements Message ----------------------------------------------

  Administrator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Administrator& from);
  void MergeFrom(const Administrator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string email = 2;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 2;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  static const int kADMINFieldNumber = 7;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Entity,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Administrator >, 11, false >
    ADMIN;
  // @@protoc_insertion_point(class_scope:ocean.Administrator)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* email_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Administrator* default_instance_;
};
// -------------------------------------------------------------------

class Update : public ::google::protobuf::Message {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();

  void Swap(Update* other);

  // implements Message ----------------------------------------------

  Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bytes updater = 2;
  inline bool has_updater() const;
  inline void clear_updater();
  static const int kUpdaterFieldNumber = 2;
  inline const ::std::string& updater() const;
  inline void set_updater(const ::std::string& value);
  inline void set_updater(const char* value);
  inline void set_updater(const void* value, size_t size);
  inline ::std::string* mutable_updater();
  inline ::std::string* release_updater();
  inline void set_allocated_updater(::std::string* updater);

  // optional .ocean.Game game = 3;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 3;
  inline const ::ocean::Game& game() const;
  inline ::ocean::Game* mutable_game();
  inline ::ocean::Game* release_game();
  inline void set_allocated_game(::ocean::Game* game);

  // optional .ocean.Session session = 5;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 5;
  inline const ::ocean::Session& session() const;
  inline ::ocean::Session* mutable_session();
  inline ::ocean::Session* release_session();
  inline void set_allocated_session(::ocean::Session* session);

  // optional .ocean.Player player = 7;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 7;
  inline const ::ocean::Player& player() const;
  inline ::ocean::Player* mutable_player();
  inline ::ocean::Player* release_player();
  inline void set_allocated_player(::ocean::Player* player);

  static const int kUPDATEFieldNumber = 4;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Event,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Update >, 11, false >
    UPDATE;
  // @@protoc_insertion_point(class_scope:ocean.Update)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_updater();
  inline void clear_has_updater();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_player();
  inline void clear_has_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* updater_;
  ::ocean::Game* game_;
  ::ocean::Session* session_;
  ::ocean::Player* player_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Update* default_instance_;
};
// -------------------------------------------------------------------

class JoinSession : public ::google::protobuf::Message {
 public:
  JoinSession();
  virtual ~JoinSession();

  JoinSession(const JoinSession& from);

  inline JoinSession& operator=(const JoinSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinSession& default_instance();

  void Swap(JoinSession* other);

  // implements Message ----------------------------------------------

  JoinSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinSession& from);
  void MergeFrom(const JoinSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const void* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // required bytes player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline const ::std::string& player_id() const;
  inline void set_player_id(const ::std::string& value);
  inline void set_player_id(const char* value);
  inline void set_player_id(const void* value, size_t size);
  inline ::std::string* mutable_player_id();
  inline ::std::string* release_player_id();
  inline void set_allocated_player_id(::std::string* player_id);

  static const int kJOINSESSIONFieldNumber = 5;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Event,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::JoinSession >, 11, false >
    JOIN_SESSION;
  // @@protoc_insertion_point(class_scope:ocean.JoinSession)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;
  ::std::string* player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static JoinSession* default_instance_;
};
// -------------------------------------------------------------------

class LeaveSession : public ::google::protobuf::Message {
 public:
  LeaveSession();
  virtual ~LeaveSession();

  LeaveSession(const LeaveSession& from);

  inline LeaveSession& operator=(const LeaveSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveSession& default_instance();

  void Swap(LeaveSession* other);

  // implements Message ----------------------------------------------

  LeaveSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveSession& from);
  void MergeFrom(const LeaveSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const void* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // required bytes player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline const ::std::string& player_id() const;
  inline void set_player_id(const ::std::string& value);
  inline void set_player_id(const char* value);
  inline void set_player_id(const void* value, size_t size);
  inline ::std::string* mutable_player_id();
  inline ::std::string* release_player_id();
  inline void set_allocated_player_id(::std::string* player_id);

  static const int kLEAVESESSIONFieldNumber = 6;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Event,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::LeaveSession >, 11, false >
    LEAVE_SESSION;
  // @@protoc_insertion_point(class_scope:ocean.LeaveSession)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;
  ::std::string* player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static LeaveSession* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSession : public ::google::protobuf::Message {
 public:
  UpdateSession();
  virtual ~UpdateSession();

  UpdateSession(const UpdateSession& from);

  inline UpdateSession& operator=(const UpdateSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSession& default_instance();

  void Swap(UpdateSession* other);

  // implements Message ----------------------------------------------

  UpdateSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSession& from);
  void MergeFrom(const UpdateSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const void* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // required bytes player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline const ::std::string& player_id() const;
  inline void set_player_id(const ::std::string& value);
  inline void set_player_id(const char* value);
  inline void set_player_id(const void* value, size_t size);
  inline ::std::string* mutable_player_id();
  inline ::std::string* release_player_id();
  inline void set_allocated_player_id(::std::string* player_id);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  static const int kUPDATESESSIONFieldNumber = 7;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Event,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::UpdateSession >, 11, false >
    UPDATE_SESSION;
  // @@protoc_insertion_point(class_scope:ocean.UpdateSession)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;
  ::std::string* player_id_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static UpdateSession* default_instance_;
};
// ===================================================================


// ===================================================================

// Game

// required string name = 1;
inline bool Game::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Game::name() const {
  return *name_;
}
inline void Game::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Game::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Game::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Game::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Game::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Game::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 2;
inline bool Game::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Game::description() const {
  return *description_;
}
inline void Game::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Game::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Game::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Game::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Game::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Game::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 state = 3;
inline bool Game::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Game::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Game::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Game::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Game::state() const {
  return state_;
}
inline void Game::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required uint32 player_count = 4;
inline bool Game::has_player_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Game::set_has_player_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Game::clear_has_player_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Game::clear_player_count() {
  player_count_ = 0u;
  clear_has_player_count();
}
inline ::google::protobuf::uint32 Game::player_count() const {
  return player_count_;
}
inline void Game::set_player_count(::google::protobuf::uint32 value) {
  set_has_player_count();
  player_count_ = value;
}

// -------------------------------------------------------------------

// Session

// required bytes game = 1;
inline bool Session::has_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::set_has_game() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Session::clear_has_game() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Session::clear_game() {
  if (game_ != &::google::protobuf::internal::kEmptyString) {
    game_->clear();
  }
  clear_has_game();
}
inline const ::std::string& Session::game() const {
  return *game_;
}
inline void Session::set_game(const ::std::string& value) {
  set_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    game_ = new ::std::string;
  }
  game_->assign(value);
}
inline void Session::set_game(const char* value) {
  set_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    game_ = new ::std::string;
  }
  game_->assign(value);
}
inline void Session::set_game(const void* value, size_t size) {
  set_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    game_ = new ::std::string;
  }
  game_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_game() {
  set_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    game_ = new ::std::string;
  }
  return game_;
}
inline ::std::string* Session::release_game() {
  clear_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_;
    game_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Session::set_allocated_game(::std::string* game) {
  if (game_ != &::google::protobuf::internal::kEmptyString) {
    delete game_;
  }
  if (game) {
    set_has_game();
    game_ = game;
  } else {
    clear_has_game();
    game_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 2;
inline bool Session::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Session::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Session::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Session::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Session::name() const {
  return *name_;
}
inline void Session::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Session::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Session::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Session::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Session::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string code = 3;
inline bool Session::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Session::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Session::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Session::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& Session::code() const {
  return *code_;
}
inline void Session::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Session::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Session::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* Session::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Session::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Player

// required string name = 1;
inline bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Player::name() const {
  return *name_;
}
inline void Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string email = 2;
inline bool Player::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Player::email() const {
  return *email_;
}
inline void Player::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Player::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Player::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Player::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 3;
inline bool Player::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Player::password() const {
  return *password_;
}
inline void Player::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Player::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Player::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Player::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes avatar = 4;
inline bool Player::has_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& Player::avatar() const {
  return *avatar_;
}
inline void Player::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Player::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Player::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* Player::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Administrator

// required string name = 1;
inline bool Administrator::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Administrator::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Administrator::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Administrator::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Administrator::name() const {
  return *name_;
}
inline void Administrator::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Administrator::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Administrator::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Administrator::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Administrator::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Administrator::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string email = 2;
inline bool Administrator::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Administrator::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Administrator::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Administrator::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Administrator::email() const {
  return *email_;
}
inline void Administrator::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Administrator::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Administrator::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Administrator::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Administrator::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Administrator::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 3;
inline bool Administrator::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Administrator::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Administrator::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Administrator::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Administrator::password() const {
  return *password_;
}
inline void Administrator::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Administrator::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Administrator::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Administrator::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Administrator::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Administrator::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Update

// required bytes id = 1;
inline bool Update::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Update::id() const {
  return *id_;
}
inline void Update::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Update::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Update::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Update::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Update::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Update::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes updater = 2;
inline bool Update::has_updater() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update::set_has_updater() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update::clear_has_updater() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update::clear_updater() {
  if (updater_ != &::google::protobuf::internal::kEmptyString) {
    updater_->clear();
  }
  clear_has_updater();
}
inline const ::std::string& Update::updater() const {
  return *updater_;
}
inline void Update::set_updater(const ::std::string& value) {
  set_has_updater();
  if (updater_ == &::google::protobuf::internal::kEmptyString) {
    updater_ = new ::std::string;
  }
  updater_->assign(value);
}
inline void Update::set_updater(const char* value) {
  set_has_updater();
  if (updater_ == &::google::protobuf::internal::kEmptyString) {
    updater_ = new ::std::string;
  }
  updater_->assign(value);
}
inline void Update::set_updater(const void* value, size_t size) {
  set_has_updater();
  if (updater_ == &::google::protobuf::internal::kEmptyString) {
    updater_ = new ::std::string;
  }
  updater_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Update::mutable_updater() {
  set_has_updater();
  if (updater_ == &::google::protobuf::internal::kEmptyString) {
    updater_ = new ::std::string;
  }
  return updater_;
}
inline ::std::string* Update::release_updater() {
  clear_has_updater();
  if (updater_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updater_;
    updater_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Update::set_allocated_updater(::std::string* updater) {
  if (updater_ != &::google::protobuf::internal::kEmptyString) {
    delete updater_;
  }
  if (updater) {
    set_has_updater();
    updater_ = updater;
  } else {
    clear_has_updater();
    updater_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .ocean.Game game = 3;
inline bool Update::has_game() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Update::set_has_game() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Update::clear_has_game() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Update::clear_game() {
  if (game_ != NULL) game_->::ocean::Game::Clear();
  clear_has_game();
}
inline const ::ocean::Game& Update::game() const {
  return game_ != NULL ? *game_ : *default_instance_->game_;
}
inline ::ocean::Game* Update::mutable_game() {
  set_has_game();
  if (game_ == NULL) game_ = new ::ocean::Game;
  return game_;
}
inline ::ocean::Game* Update::release_game() {
  clear_has_game();
  ::ocean::Game* temp = game_;
  game_ = NULL;
  return temp;
}
inline void Update::set_allocated_game(::ocean::Game* game) {
  delete game_;
  game_ = game;
  if (game) {
    set_has_game();
  } else {
    clear_has_game();
  }
}

// optional .ocean.Session session = 5;
inline bool Update::has_session() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Update::set_has_session() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Update::clear_has_session() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Update::clear_session() {
  if (session_ != NULL) session_->::ocean::Session::Clear();
  clear_has_session();
}
inline const ::ocean::Session& Update::session() const {
  return session_ != NULL ? *session_ : *default_instance_->session_;
}
inline ::ocean::Session* Update::mutable_session() {
  set_has_session();
  if (session_ == NULL) session_ = new ::ocean::Session;
  return session_;
}
inline ::ocean::Session* Update::release_session() {
  clear_has_session();
  ::ocean::Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline void Update::set_allocated_session(::ocean::Session* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
}

// optional .ocean.Player player = 7;
inline bool Update::has_player() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Update::set_has_player() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Update::clear_has_player() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Update::clear_player() {
  if (player_ != NULL) player_->::ocean::Player::Clear();
  clear_has_player();
}
inline const ::ocean::Player& Update::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::ocean::Player* Update::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::ocean::Player;
  return player_;
}
inline ::ocean::Player* Update::release_player() {
  clear_has_player();
  ::ocean::Player* temp = player_;
  player_ = NULL;
  return temp;
}
inline void Update::set_allocated_player(::ocean::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// -------------------------------------------------------------------

// JoinSession

// required bytes session_id = 1;
inline bool JoinSession::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinSession::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinSession::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinSession::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& JoinSession::session_id() const {
  return *session_id_;
}
inline void JoinSession::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void JoinSession::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void JoinSession::set_session_id(const void* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JoinSession::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* JoinSession::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JoinSession::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes player_id = 2;
inline bool JoinSession::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinSession::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinSession::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinSession::clear_player_id() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    player_id_->clear();
  }
  clear_has_player_id();
}
inline const ::std::string& JoinSession::player_id() const {
  return *player_id_;
}
inline void JoinSession::set_player_id(const ::std::string& value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void JoinSession::set_player_id(const char* value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void JoinSession::set_player_id(const void* value, size_t size) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JoinSession::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  return player_id_;
}
inline ::std::string* JoinSession::release_player_id() {
  clear_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_id_;
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JoinSession::set_allocated_player_id(::std::string* player_id) {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (player_id) {
    set_has_player_id();
    player_id_ = player_id;
  } else {
    clear_has_player_id();
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LeaveSession

// required bytes session_id = 1;
inline bool LeaveSession::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveSession::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveSession::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveSession::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& LeaveSession::session_id() const {
  return *session_id_;
}
inline void LeaveSession::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void LeaveSession::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void LeaveSession::set_session_id(const void* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LeaveSession::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* LeaveSession::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LeaveSession::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes player_id = 2;
inline bool LeaveSession::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaveSession::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaveSession::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaveSession::clear_player_id() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    player_id_->clear();
  }
  clear_has_player_id();
}
inline const ::std::string& LeaveSession::player_id() const {
  return *player_id_;
}
inline void LeaveSession::set_player_id(const ::std::string& value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void LeaveSession::set_player_id(const char* value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void LeaveSession::set_player_id(const void* value, size_t size) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LeaveSession::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  return player_id_;
}
inline ::std::string* LeaveSession::release_player_id() {
  clear_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_id_;
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LeaveSession::set_allocated_player_id(::std::string* player_id) {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (player_id) {
    set_has_player_id();
    player_id_ = player_id;
  } else {
    clear_has_player_id();
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateSession

// required bytes session_id = 1;
inline bool UpdateSession::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSession::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSession::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSession::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& UpdateSession::session_id() const {
  return *session_id_;
}
inline void UpdateSession::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void UpdateSession::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void UpdateSession::set_session_id(const void* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSession::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* UpdateSession::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateSession::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes player_id = 2;
inline bool UpdateSession::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSession::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSession::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSession::clear_player_id() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    player_id_->clear();
  }
  clear_has_player_id();
}
inline const ::std::string& UpdateSession::player_id() const {
  return *player_id_;
}
inline void UpdateSession::set_player_id(const ::std::string& value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void UpdateSession::set_player_id(const char* value) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(value);
}
inline void UpdateSession::set_player_id(const void* value, size_t size) {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  player_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSession::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    player_id_ = new ::std::string;
  }
  return player_id_;
}
inline ::std::string* UpdateSession::release_player_id() {
  clear_has_player_id();
  if (player_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_id_;
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateSession::set_allocated_player_id(::std::string* player_id) {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (player_id) {
    set_has_player_id();
    player_id_ = player_id;
  } else {
    clear_has_player_id();
    player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes data = 3;
inline bool UpdateSession::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateSession::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateSession::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateSession::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& UpdateSession::data() const {
  return *data_;
}
inline void UpdateSession::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void UpdateSession::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void UpdateSession::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSession::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* UpdateSession::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateSession::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ocean

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ocean_2eproto__INCLUDED
