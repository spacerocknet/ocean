// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ocean.proto

#ifndef PROTOBUF_ocean_2eproto__INCLUDED
#define PROTOBUF_ocean_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "model.pb.h"
#include "type.pb.h"
// @@protoc_insertion_point(includes)

namespace ocean {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ocean_2eproto();
void protobuf_AssignDesc_ocean_2eproto();
void protobuf_ShutdownFile_ocean_2eproto();

class Player;
class Session;
class Game;
class Tictactoe;

enum Player_State {
  Player_State_REGISTED = 1,
  Player_State_ACTIVE = 2,
  Player_State_DELETED = 3
};
bool Player_State_IsValid(int value);
const Player_State Player_State_State_MIN = Player_State_REGISTED;
const Player_State Player_State_State_MAX = Player_State_DELETED;
const int Player_State_State_ARRAYSIZE = Player_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Player_State_descriptor();
inline const ::std::string& Player_State_Name(Player_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Player_State_descriptor(), value);
}
inline bool Player_State_Parse(
    const ::std::string& name, Player_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Player_State>(
    Player_State_descriptor(), name, value);
}
enum Session_State {
  Session_State_CREATED = 1,
  Session_State_PLAYING = 2,
  Session_State_FINISHED = 3
};
bool Session_State_IsValid(int value);
const Session_State Session_State_State_MIN = Session_State_CREATED;
const Session_State Session_State_State_MAX = Session_State_FINISHED;
const int Session_State_State_ARRAYSIZE = Session_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Session_State_descriptor();
inline const ::std::string& Session_State_Name(Session_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Session_State_descriptor(), value);
}
inline bool Session_State_Parse(
    const ::std::string& name, Session_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Session_State>(
    Session_State_descriptor(), name, value);
}
enum Tictactoe_State {
  Tictactoe_State_EMPTY = 1,
  Tictactoe_State_X = 2,
  Tictactoe_State_O = 3
};
bool Tictactoe_State_IsValid(int value);
const Tictactoe_State Tictactoe_State_State_MIN = Tictactoe_State_EMPTY;
const Tictactoe_State Tictactoe_State_State_MAX = Tictactoe_State_O;
const int Tictactoe_State_State_ARRAYSIZE = Tictactoe_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Tictactoe_State_descriptor();
inline const ::std::string& Tictactoe_State_Name(Tictactoe_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Tictactoe_State_descriptor(), value);
}
inline bool Tictactoe_State_Parse(
    const ::std::string& name, Tictactoe_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Tictactoe_State>(
    Tictactoe_State_descriptor(), name, value);
}
// ===================================================================

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Player_State State;
  static const State REGISTED = Player_State_REGISTED;
  static const State ACTIVE = Player_State_ACTIVE;
  static const State DELETED = Player_State_DELETED;
  static inline bool State_IsValid(int value) {
    return Player_State_IsValid(value);
  }
  static const State State_MIN =
    Player_State_State_MIN;
  static const State State_MAX =
    Player_State_State_MAX;
  static const int State_ARRAYSIZE =
    Player_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Player_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Player_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Player_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required string name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string avatar = 6;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 6;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // required uint32 state = 7;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional bytes session = 9;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 9;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const void* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  inline void set_allocated_session(::std::string* session);

  static const int kPLAYERFieldNumber = 4;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Entity,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Player >, 11, false >
    PLAYER;
  // @@protoc_insertion_point(class_scope:ocean.Player)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_session();
  inline void clear_has_session();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::std::string* password_;
  ::std::string* name_;
  ::std::string* avatar_;
  ::std::string* session_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  void Swap(Session* other);

  // implements Message ----------------------------------------------

  Session* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Session_State State;
  static const State CREATED = Session_State_CREATED;
  static const State PLAYING = Session_State_PLAYING;
  static const State FINISHED = Session_State_FINISHED;
  static inline bool State_IsValid(int value) {
    return Session_State_IsValid(value);
  }
  static const State State_MIN =
    Session_State_State_MIN;
  static const State State_MAX =
    Session_State_State_MAX;
  static const int State_ARRAYSIZE =
    Session_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Session_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Session_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Session_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes creator = 1;
  inline bool has_creator() const;
  inline void clear_creator();
  static const int kCreatorFieldNumber = 1;
  inline const ::std::string& creator() const;
  inline void set_creator(const ::std::string& value);
  inline void set_creator(const char* value);
  inline void set_creator(const void* value, size_t size);
  inline ::std::string* mutable_creator();
  inline ::std::string* release_creator();
  inline void set_allocated_creator(::std::string* creator);

  // required bytes game = 9;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 9;
  inline const ::std::string& game() const;
  inline void set_game(const ::std::string& value);
  inline void set_game(const char* value);
  inline void set_game(const void* value, size_t size);
  inline ::std::string* mutable_game();
  inline ::std::string* release_game();
  inline void set_allocated_game(::std::string* game);

  // required string ip = 10;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 10;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 state = 7;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Session)
  static const int kSESSIONFieldNumber = 5;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Entity,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Session >, 11, false >
    SESSION;
  // @@protoc_insertion_point(class_scope:ocean.Session)
 private:
  inline void set_has_creator();
  inline void clear_has_creator();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* creator_;
  ::std::string* game_;
  ::std::string* ip_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Session* default_instance_;
};
// -------------------------------------------------------------------

class Game : public ::google::protobuf::Message {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game& default_instance();

  void Swap(Game* other);

  // implements Message ----------------------------------------------

  Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 11;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 11;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  static const int kGAMEFieldNumber = 6;
  static ::google::protobuf::internal::ExtensionIdentifier< ::model::Entity,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Game >, 11, false >
    GAME;
  // @@protoc_insertion_point(class_scope:ocean.Game)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* description_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Game* default_instance_;
};
// -------------------------------------------------------------------

class Tictactoe : public ::google::protobuf::Message {
 public:
  Tictactoe();
  virtual ~Tictactoe();

  Tictactoe(const Tictactoe& from);

  inline Tictactoe& operator=(const Tictactoe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tictactoe& default_instance();

  void Swap(Tictactoe* other);

  // implements Message ----------------------------------------------

  Tictactoe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tictactoe& from);
  void MergeFrom(const Tictactoe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Tictactoe_State State;
  static const State EMPTY = Tictactoe_State_EMPTY;
  static const State X = Tictactoe_State_X;
  static const State O = Tictactoe_State_O;
  static inline bool State_IsValid(int value) {
    return Tictactoe_State_IsValid(value);
  }
  static const State State_MIN =
    Tictactoe_State_State_MIN;
  static const State State_MAX =
    Tictactoe_State_State_MAX;
  static const int State_ARRAYSIZE =
    Tictactoe_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Tictactoe_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Tictactoe_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Tictactoe_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 state = 1;
  inline int state_size() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::uint32 state(int index) const;
  inline void set_state(int index, ::google::protobuf::uint32 value);
  inline void add_state(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      state() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_state();

  static const int kTICTACTOEFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::ocean::Session,
      ::google::protobuf::internal::MessageTypeTraits< ::ocean::Tictactoe >, 11, false >
    TICTACTOE;
  // @@protoc_insertion_point(class_scope:ocean.Tictactoe)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ocean_2eproto();
  friend void protobuf_AssignDesc_ocean_2eproto();
  friend void protobuf_ShutdownFile_ocean_2eproto();

  void InitAsDefaultInstance();
  static Tictactoe* default_instance_;
};
// ===================================================================


// ===================================================================

// Player

// required string uid = 1;
inline bool Player::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& Player::uid() const {
  return *uid_;
}
inline void Player::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void Player::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void Player::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* Player::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool Player::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Player::password() const {
  return *password_;
}
inline void Player::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Player::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Player::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Player::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 8;
inline bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Player::name() const {
  return *name_;
}
inline void Player::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Player::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Player::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string avatar = 6;
inline bool Player::has_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& Player::avatar() const {
  return *avatar_;
}
inline void Player::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Player::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Player::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* Player::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 state = 7;
inline bool Player::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Player::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Player::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Player::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 Player::state() const {
  return state_;
}
inline void Player::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional bytes session = 9;
inline bool Player::has_session() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Player::set_has_session() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Player::clear_has_session() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Player::clear_session() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& Player::session() const {
  return *session_;
}
inline void Player::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void Player::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(value);
}
inline void Player::set_session(const void* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    session_ = new ::std::string;
  }
  return session_;
}
inline ::std::string* Player::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_session(::std::string* session) {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (session) {
    set_has_session();
    session_ = session;
  } else {
    clear_has_session();
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Session

// required bytes creator = 1;
inline bool Session::has_creator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::set_has_creator() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Session::clear_has_creator() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Session::clear_creator() {
  if (creator_ != &::google::protobuf::internal::kEmptyString) {
    creator_->clear();
  }
  clear_has_creator();
}
inline const ::std::string& Session::creator() const {
  return *creator_;
}
inline void Session::set_creator(const ::std::string& value) {
  set_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    creator_ = new ::std::string;
  }
  creator_->assign(value);
}
inline void Session::set_creator(const char* value) {
  set_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    creator_ = new ::std::string;
  }
  creator_->assign(value);
}
inline void Session::set_creator(const void* value, size_t size) {
  set_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    creator_ = new ::std::string;
  }
  creator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_creator() {
  set_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    creator_ = new ::std::string;
  }
  return creator_;
}
inline ::std::string* Session::release_creator() {
  clear_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creator_;
    creator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Session::set_allocated_creator(::std::string* creator) {
  if (creator_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_;
  }
  if (creator) {
    set_has_creator();
    creator_ = creator;
  } else {
    clear_has_creator();
    creator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes game = 9;
inline bool Session::has_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Session::set_has_game() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Session::clear_has_game() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Session::clear_game() {
  if (game_ != &::google::protobuf::internal::kEmptyString) {
    game_->clear();
  }
  clear_has_game();
}
inline const ::std::string& Session::game() const {
  return *game_;
}
inline void Session::set_game(const ::std::string& value) {
  set_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    game_ = new ::std::string;
  }
  game_->assign(value);
}
inline void Session::set_game(const char* value) {
  set_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    game_ = new ::std::string;
  }
  game_->assign(value);
}
inline void Session::set_game(const void* value, size_t size) {
  set_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    game_ = new ::std::string;
  }
  game_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_game() {
  set_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    game_ = new ::std::string;
  }
  return game_;
}
inline ::std::string* Session::release_game() {
  clear_has_game();
  if (game_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_;
    game_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Session::set_allocated_game(::std::string* game) {
  if (game_ != &::google::protobuf::internal::kEmptyString) {
    delete game_;
  }
  if (game) {
    set_has_game();
    game_ = game;
  } else {
    clear_has_game();
    game_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 10;
inline bool Session::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Session::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Session::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Session::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Session::ip() const {
  return *ip_;
}
inline void Session::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Session::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Session::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Session::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Session::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 state = 7;
inline bool Session::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Session::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Session::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Session::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 Session::state() const {
  return state_;
}
inline void Session::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// Game

// required string name = 1;
inline bool Game::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Game::name() const {
  return *name_;
}
inline void Game::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Game::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Game::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Game::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Game::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Game::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 11;
inline bool Game::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Game::description() const {
  return *description_;
}
inline void Game::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Game::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Game::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Game::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Game::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Game::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Tictactoe

// repeated uint32 state = 1;
inline int Tictactoe::state_size() const {
  return state_.size();
}
inline void Tictactoe::clear_state() {
  state_.Clear();
}
inline ::google::protobuf::uint32 Tictactoe::state(int index) const {
  return state_.Get(index);
}
inline void Tictactoe::set_state(int index, ::google::protobuf::uint32 value) {
  state_.Set(index, value);
}
inline void Tictactoe::add_state(::google::protobuf::uint32 value) {
  state_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Tictactoe::state() const {
  return state_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Tictactoe::mutable_state() {
  return &state_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ocean

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ocean::Player_State>() {
  return ::ocean::Player_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ocean::Session_State>() {
  return ::ocean::Session_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ocean::Tictactoe_State>() {
  return ::ocean::Tictactoe_State_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ocean_2eproto__INCLUDED
