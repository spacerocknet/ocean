// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* SigninRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigninRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SigninReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigninReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeCreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeCreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeCreateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeCreateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeJoinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeJoinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeJoinReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeJoinReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeLeaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeLeaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeLeavenReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeLeavenReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeMoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeMoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TictactoeMoveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TictactoeMoveReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_comm_2eproto() {
  protobuf_AddDesc_comm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comm.proto");
  GOOGLE_CHECK(file != NULL);
  SigninRequest_descriptor_ = file->message_type(0);
  static const int SigninRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninRequest, password_),
  };
  SigninRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SigninRequest_descriptor_,
      SigninRequest::default_instance_,
      SigninRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SigninRequest));
  SigninReply_descriptor_ = file->message_type(1);
  static const int SigninReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninReply, auth_),
  };
  SigninReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SigninReply_descriptor_,
      SigninReply::default_instance_,
      SigninReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SigninReply));
  TictactoeCreateRequest_descriptor_ = file->message_type(2);
  static const int TictactoeCreateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeCreateRequest, auth_),
  };
  TictactoeCreateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeCreateRequest_descriptor_,
      TictactoeCreateRequest::default_instance_,
      TictactoeCreateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeCreateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeCreateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeCreateRequest));
  TictactoeCreateReply_descriptor_ = file->message_type(3);
  static const int TictactoeCreateReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeCreateReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeCreateReply, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeCreateReply, ip_),
  };
  TictactoeCreateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeCreateReply_descriptor_,
      TictactoeCreateReply::default_instance_,
      TictactoeCreateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeCreateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeCreateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeCreateReply));
  TictactoeJoinRequest_descriptor_ = file->message_type(4);
  static const int TictactoeJoinRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinRequest, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinRequest, session_id_),
  };
  TictactoeJoinRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeJoinRequest_descriptor_,
      TictactoeJoinRequest::default_instance_,
      TictactoeJoinRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeJoinRequest));
  TictactoeJoinReply_descriptor_ = file->message_type(5);
  static const int TictactoeJoinReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinReply, creator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinReply, creator_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinReply, creator_avatar_),
  };
  TictactoeJoinReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeJoinReply_descriptor_,
      TictactoeJoinReply::default_instance_,
      TictactoeJoinReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeJoinReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeJoinReply));
  TictactoeListRequest_descriptor_ = file->message_type(6);
  static const int TictactoeListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListRequest, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListRequest, count_),
  };
  TictactoeListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeListRequest_descriptor_,
      TictactoeListRequest::default_instance_,
      TictactoeListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeListRequest));
  TictactoeListReply_descriptor_ = file->message_type(7);
  static const int TictactoeListReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListReply, creator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListReply, creator_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListReply, creator_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListReply, ip_),
  };
  TictactoeListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeListReply_descriptor_,
      TictactoeListReply::default_instance_,
      TictactoeListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeListReply));
  TictactoeLeaveRequest_descriptor_ = file->message_type(8);
  static const int TictactoeLeaveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeLeaveRequest, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeLeaveRequest, session_id_),
  };
  TictactoeLeaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeLeaveRequest_descriptor_,
      TictactoeLeaveRequest::default_instance_,
      TictactoeLeaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeLeaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeLeaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeLeaveRequest));
  TictactoeLeavenReply_descriptor_ = file->message_type(9);
  static const int TictactoeLeavenReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeLeavenReply, type_),
  };
  TictactoeLeavenReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeLeavenReply_descriptor_,
      TictactoeLeavenReply::default_instance_,
      TictactoeLeavenReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeLeavenReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeLeavenReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeLeavenReply));
  TictactoeMoveRequest_descriptor_ = file->message_type(10);
  static const int TictactoeMoveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeMoveRequest, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeMoveRequest, session_id_),
  };
  TictactoeMoveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeMoveRequest_descriptor_,
      TictactoeMoveRequest::default_instance_,
      TictactoeMoveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeMoveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeMoveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeMoveRequest));
  TictactoeMoveReply_descriptor_ = file->message_type(11);
  static const int TictactoeMoveReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeMoveReply, type_),
  };
  TictactoeMoveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TictactoeMoveReply_descriptor_,
      TictactoeMoveReply::default_instance_,
      TictactoeMoveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeMoveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TictactoeMoveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TictactoeMoveReply));
  ServiceType_descriptor_ = file->enum_type(0);
  ErrorType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SigninRequest_descriptor_, &SigninRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SigninReply_descriptor_, &SigninReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeCreateRequest_descriptor_, &TictactoeCreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeCreateReply_descriptor_, &TictactoeCreateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeJoinRequest_descriptor_, &TictactoeJoinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeJoinReply_descriptor_, &TictactoeJoinReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeListRequest_descriptor_, &TictactoeListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeListReply_descriptor_, &TictactoeListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeLeaveRequest_descriptor_, &TictactoeLeaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeLeavenReply_descriptor_, &TictactoeLeavenReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeMoveRequest_descriptor_, &TictactoeMoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TictactoeMoveReply_descriptor_, &TictactoeMoveReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comm_2eproto() {
  delete SigninRequest::default_instance_;
  delete SigninRequest_reflection_;
  delete SigninReply::default_instance_;
  delete SigninReply_reflection_;
  delete TictactoeCreateRequest::default_instance_;
  delete TictactoeCreateRequest_reflection_;
  delete TictactoeCreateReply::default_instance_;
  delete TictactoeCreateReply_reflection_;
  delete TictactoeJoinRequest::default_instance_;
  delete TictactoeJoinRequest_reflection_;
  delete TictactoeJoinReply::default_instance_;
  delete TictactoeJoinReply_reflection_;
  delete TictactoeListRequest::default_instance_;
  delete TictactoeListRequest_reflection_;
  delete TictactoeListReply::default_instance_;
  delete TictactoeListReply_reflection_;
  delete TictactoeLeaveRequest::default_instance_;
  delete TictactoeLeaveRequest_reflection_;
  delete TictactoeLeavenReply::default_instance_;
  delete TictactoeLeavenReply_reflection_;
  delete TictactoeMoveRequest::default_instance_;
  delete TictactoeMoveRequest_reflection_;
  delete TictactoeMoveReply::default_instance_;
  delete TictactoeMoveReply_reflection_;
}

void protobuf_AddDesc_comm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncomm.proto\022\004comm\".\n\rSigninRequest\022\013\n\003u"
    "id\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\")\n\013SigninRepl"
    "y\022\014\n\004type\030\001 \002(\005\022\014\n\004auth\030\002 \002(\t\"&\n\026Tictact"
    "oeCreateRequest\022\014\n\004auth\030\001 \002(\t\"D\n\024Tictact"
    "oeCreateReply\022\014\n\004type\030\001 \002(\005\022\022\n\nsession_i"
    "d\030\002 \002(\t\022\n\n\002ip\030\003 \002(\t\"8\n\024TictactoeJoinRequ"
    "est\022\014\n\004auth\030\001 \002(\t\022\022\n\nsession_id\030\002 \002(\t\"d\n"
    "\022TictactoeJoinReply\022\014\n\004type\030\001 \002(\005\022\022\n\ncre"
    "ator_id\030\002 \002(\t\022\024\n\014creator_name\030\003 \002(\t\022\026\n\016c"
    "reator_avatar\030\004 \001(\t\"3\n\024TictactoeListRequ"
    "est\022\014\n\004auth\030\001 \002(\t\022\r\n\005count\030\002 \001(\r\"p\n\022Tict"
    "actoeListReply\022\014\n\004type\030\001 \002(\005\022\022\n\ncreator_"
    "id\030\002 \002(\t\022\024\n\014creator_name\030\003 \002(\t\022\026\n\016creato"
    "r_avatar\030\004 \001(\t\022\n\n\002ip\030\005 \002(\t\">\n\025TictactoeL"
    "eaveRequest\022\021\n\tplayer_id\030\001 \002(\t\022\022\n\nsessio"
    "n_id\030\002 \002(\t\"$\n\024TictactoeLeavenReply\022\014\n\004ty"
    "pe\030\001 \002(\005\"8\n\024TictactoeMoveRequest\022\014\n\004auth"
    "\030\001 \002(\t\022\022\n\nsession_id\030\002 \002(\t\"\"\n\022TictactoeM"
    "oveReply\022\014\n\004type\030\001 \002(\005*\222\001\n\013ServiceType\022\n"
    "\n\006SIGNIN\020d\022\013\n\007SIGNOUT\020e\022\025\n\020TICTACTOE_CRE"
    "ATE\020\310\001\022\023\n\016TICTACTOE_JOIN\020\311\001\022\023\n\016TICTACTOE"
    "_MOVE\020\312\001\022\023\n\016TICTACTOE_LIST\020\313\001\022\024\n\017TICTACT"
    "OE_LEAVE\020\313\001*\255\001\n\tErrorType\022\006\n\002OK\020\000\022\014\n\010DB_"
    "ERROR\020\001\022\023\n\017INVALID_REQUEST\020\002\022\022\n\016ENTITY_I"
    "NVALID\020\003\022\024\n\020ENTITY_NOT_FOUND\020\004\022\017\n\013UID_IN"
    "VALID\020\005\022\020\n\014COMMIT_ERROR\020\006\022\024\n\020PASSWORD_IN"
    "VALID\020\007\022\022\n\016UID_DUPLICATED\020\t", 1067);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
  SigninRequest::default_instance_ = new SigninRequest();
  SigninReply::default_instance_ = new SigninReply();
  TictactoeCreateRequest::default_instance_ = new TictactoeCreateRequest();
  TictactoeCreateReply::default_instance_ = new TictactoeCreateReply();
  TictactoeJoinRequest::default_instance_ = new TictactoeJoinRequest();
  TictactoeJoinReply::default_instance_ = new TictactoeJoinReply();
  TictactoeListRequest::default_instance_ = new TictactoeListRequest();
  TictactoeListReply::default_instance_ = new TictactoeListReply();
  TictactoeLeaveRequest::default_instance_ = new TictactoeLeaveRequest();
  TictactoeLeavenReply::default_instance_ = new TictactoeLeavenReply();
  TictactoeMoveRequest::default_instance_ = new TictactoeMoveRequest();
  TictactoeMoveReply::default_instance_ = new TictactoeMoveReply();
  SigninRequest::default_instance_->InitAsDefaultInstance();
  SigninReply::default_instance_->InitAsDefaultInstance();
  TictactoeCreateRequest::default_instance_->InitAsDefaultInstance();
  TictactoeCreateReply::default_instance_->InitAsDefaultInstance();
  TictactoeJoinRequest::default_instance_->InitAsDefaultInstance();
  TictactoeJoinReply::default_instance_->InitAsDefaultInstance();
  TictactoeListRequest::default_instance_->InitAsDefaultInstance();
  TictactoeListReply::default_instance_->InitAsDefaultInstance();
  TictactoeLeaveRequest::default_instance_->InitAsDefaultInstance();
  TictactoeLeavenReply::default_instance_->InitAsDefaultInstance();
  TictactoeMoveRequest::default_instance_->InitAsDefaultInstance();
  TictactoeMoveReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comm_2eproto {
  StaticDescriptorInitializer_comm_2eproto() {
    protobuf_AddDesc_comm_2eproto();
  }
} static_descriptor_initializer_comm_2eproto_;
const ::google::protobuf::EnumDescriptor* ServiceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceType_descriptor_;
}
bool ServiceType_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 200:
    case 201:
    case 202:
    case 203:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorType_descriptor_;
}
bool ErrorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SigninRequest::kUidFieldNumber;
const int SigninRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

SigninRequest::SigninRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SigninRequest::InitAsDefaultInstance() {
}

SigninRequest::SigninRequest(const SigninRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SigninRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigninRequest::~SigninRequest() {
  SharedDtor();
}

void SigninRequest::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void SigninRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigninRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigninRequest_descriptor_;
}

const SigninRequest& SigninRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

SigninRequest* SigninRequest::default_instance_ = NULL;

SigninRequest* SigninRequest::New() const {
  return new SigninRequest;
}

void SigninRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SigninRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SigninRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SigninRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SigninRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigninRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SigninRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SigninRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SigninRequest::MergeFrom(const SigninRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SigninRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigninRequest::CopyFrom(const SigninRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigninRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SigninRequest::Swap(SigninRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SigninRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigninRequest_descriptor_;
  metadata.reflection = SigninRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SigninReply::kTypeFieldNumber;
const int SigninReply::kAuthFieldNumber;
#endif  // !_MSC_VER

SigninReply::SigninReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SigninReply::InitAsDefaultInstance() {
}

SigninReply::SigninReply(const SigninReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SigninReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigninReply::~SigninReply() {
  SharedDtor();
}

void SigninReply::SharedDtor() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (this != default_instance_) {
  }
}

void SigninReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigninReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigninReply_descriptor_;
}

const SigninReply& SigninReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

SigninReply* SigninReply::default_instance_ = NULL;

SigninReply* SigninReply::New() const {
  return new SigninReply;
}

void SigninReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_auth()) {
      if (auth_ != &::google::protobuf::internal::kEmptyString) {
        auth_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SigninReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auth;
        break;
      }

      // required string auth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth().data(), this->auth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SigninReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string auth = 2;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->auth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SigninReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string auth = 2;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->auth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SigninReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string auth = 2;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigninReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SigninReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SigninReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SigninReply::MergeFrom(const SigninReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_auth()) {
      set_auth(from.auth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SigninReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigninReply::CopyFrom(const SigninReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigninReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SigninReply::Swap(SigninReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(auth_, other->auth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SigninReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigninReply_descriptor_;
  metadata.reflection = SigninReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeCreateRequest::kAuthFieldNumber;
#endif  // !_MSC_VER

TictactoeCreateRequest::TictactoeCreateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeCreateRequest::InitAsDefaultInstance() {
}

TictactoeCreateRequest::TictactoeCreateRequest(const TictactoeCreateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeCreateRequest::SharedCtor() {
  _cached_size_ = 0;
  auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeCreateRequest::~TictactoeCreateRequest() {
  SharedDtor();
}

void TictactoeCreateRequest::SharedDtor() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (this != default_instance_) {
  }
}

void TictactoeCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeCreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeCreateRequest_descriptor_;
}

const TictactoeCreateRequest& TictactoeCreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeCreateRequest* TictactoeCreateRequest::default_instance_ = NULL;

TictactoeCreateRequest* TictactoeCreateRequest::New() const {
  return new TictactoeCreateRequest;
}

void TictactoeCreateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_auth()) {
      if (auth_ != &::google::protobuf::internal::kEmptyString) {
        auth_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string auth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth().data(), this->auth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string auth = 1;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->auth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeCreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string auth = 1;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeCreateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string auth = 1;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeCreateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeCreateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeCreateRequest::MergeFrom(const TictactoeCreateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth()) {
      set_auth(from.auth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeCreateRequest::CopyFrom(const TictactoeCreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeCreateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TictactoeCreateRequest::Swap(TictactoeCreateRequest* other) {
  if (other != this) {
    std::swap(auth_, other->auth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeCreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeCreateRequest_descriptor_;
  metadata.reflection = TictactoeCreateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeCreateReply::kTypeFieldNumber;
const int TictactoeCreateReply::kSessionIdFieldNumber;
const int TictactoeCreateReply::kIpFieldNumber;
#endif  // !_MSC_VER

TictactoeCreateReply::TictactoeCreateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeCreateReply::InitAsDefaultInstance() {
}

TictactoeCreateReply::TictactoeCreateReply(const TictactoeCreateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeCreateReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeCreateReply::~TictactoeCreateReply() {
  SharedDtor();
}

void TictactoeCreateReply::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void TictactoeCreateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeCreateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeCreateReply_descriptor_;
}

const TictactoeCreateReply& TictactoeCreateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeCreateReply* TictactoeCreateReply::default_instance_ = NULL;

TictactoeCreateReply* TictactoeCreateReply::New() const {
  return new TictactoeCreateReply;
}

void TictactoeCreateReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeCreateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeCreateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeCreateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeCreateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeCreateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeCreateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeCreateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeCreateReply::MergeFrom(const TictactoeCreateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeCreateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeCreateReply::CopyFrom(const TictactoeCreateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeCreateReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TictactoeCreateReply::Swap(TictactoeCreateReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(session_id_, other->session_id_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeCreateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeCreateReply_descriptor_;
  metadata.reflection = TictactoeCreateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeJoinRequest::kAuthFieldNumber;
const int TictactoeJoinRequest::kSessionIdFieldNumber;
#endif  // !_MSC_VER

TictactoeJoinRequest::TictactoeJoinRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeJoinRequest::InitAsDefaultInstance() {
}

TictactoeJoinRequest::TictactoeJoinRequest(const TictactoeJoinRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeJoinRequest::SharedCtor() {
  _cached_size_ = 0;
  auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeJoinRequest::~TictactoeJoinRequest() {
  SharedDtor();
}

void TictactoeJoinRequest::SharedDtor() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void TictactoeJoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeJoinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeJoinRequest_descriptor_;
}

const TictactoeJoinRequest& TictactoeJoinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeJoinRequest* TictactoeJoinRequest::default_instance_ = NULL;

TictactoeJoinRequest* TictactoeJoinRequest::New() const {
  return new TictactoeJoinRequest;
}

void TictactoeJoinRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_auth()) {
      if (auth_ != &::google::protobuf::internal::kEmptyString) {
        auth_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeJoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string auth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth().data(), this->auth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeJoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string auth = 1;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->auth(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeJoinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string auth = 1;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeJoinRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string auth = 1;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeJoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeJoinRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeJoinRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeJoinRequest::MergeFrom(const TictactoeJoinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth()) {
      set_auth(from.auth());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeJoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeJoinRequest::CopyFrom(const TictactoeJoinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeJoinRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TictactoeJoinRequest::Swap(TictactoeJoinRequest* other) {
  if (other != this) {
    std::swap(auth_, other->auth_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeJoinRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeJoinRequest_descriptor_;
  metadata.reflection = TictactoeJoinRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeJoinReply::kTypeFieldNumber;
const int TictactoeJoinReply::kCreatorIdFieldNumber;
const int TictactoeJoinReply::kCreatorNameFieldNumber;
const int TictactoeJoinReply::kCreatorAvatarFieldNumber;
#endif  // !_MSC_VER

TictactoeJoinReply::TictactoeJoinReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeJoinReply::InitAsDefaultInstance() {
}

TictactoeJoinReply::TictactoeJoinReply(const TictactoeJoinReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeJoinReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeJoinReply::~TictactoeJoinReply() {
  SharedDtor();
}

void TictactoeJoinReply::SharedDtor() {
  if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_id_;
  }
  if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_name_;
  }
  if (creator_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_avatar_;
  }
  if (this != default_instance_) {
  }
}

void TictactoeJoinReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeJoinReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeJoinReply_descriptor_;
}

const TictactoeJoinReply& TictactoeJoinReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeJoinReply* TictactoeJoinReply::default_instance_ = NULL;

TictactoeJoinReply* TictactoeJoinReply::New() const {
  return new TictactoeJoinReply;
}

void TictactoeJoinReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_creator_id()) {
      if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
        creator_id_->clear();
      }
    }
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
        creator_name_->clear();
      }
    }
    if (has_creator_avatar()) {
      if (creator_avatar_ != &::google::protobuf::internal::kEmptyString) {
        creator_avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeJoinReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creator_id;
        break;
      }

      // required string creator_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator_id().data(), this->creator_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator_name().data(), this->creator_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_creator_avatar;
        break;
      }

      // optional string creator_avatar = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator_avatar().data(), this->creator_avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeJoinReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string creator_id = 2;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_id().data(), this->creator_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->creator_id(), output);
  }

  // required string creator_name = 3;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_name().data(), this->creator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->creator_name(), output);
  }

  // optional string creator_avatar = 4;
  if (has_creator_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_avatar().data(), this->creator_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->creator_avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeJoinReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string creator_id = 2;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_id().data(), this->creator_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->creator_id(), target);
  }

  // required string creator_name = 3;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_name().data(), this->creator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creator_name(), target);
  }

  // optional string creator_avatar = 4;
  if (has_creator_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_avatar().data(), this->creator_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->creator_avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeJoinReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string creator_id = 2;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_id());
    }

    // required string creator_name = 3;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // optional string creator_avatar = 4;
    if (has_creator_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeJoinReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeJoinReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeJoinReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeJoinReply::MergeFrom(const TictactoeJoinReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_creator_avatar()) {
      set_creator_avatar(from.creator_avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeJoinReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeJoinReply::CopyFrom(const TictactoeJoinReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeJoinReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TictactoeJoinReply::Swap(TictactoeJoinReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(creator_avatar_, other->creator_avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeJoinReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeJoinReply_descriptor_;
  metadata.reflection = TictactoeJoinReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeListRequest::kAuthFieldNumber;
const int TictactoeListRequest::kCountFieldNumber;
#endif  // !_MSC_VER

TictactoeListRequest::TictactoeListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeListRequest::InitAsDefaultInstance() {
}

TictactoeListRequest::TictactoeListRequest(const TictactoeListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeListRequest::SharedCtor() {
  _cached_size_ = 0;
  auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeListRequest::~TictactoeListRequest() {
  SharedDtor();
}

void TictactoeListRequest::SharedDtor() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (this != default_instance_) {
  }
}

void TictactoeListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeListRequest_descriptor_;
}

const TictactoeListRequest& TictactoeListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeListRequest* TictactoeListRequest::default_instance_ = NULL;

TictactoeListRequest* TictactoeListRequest::New() const {
  return new TictactoeListRequest;
}

void TictactoeListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_auth()) {
      if (auth_ != &::google::protobuf::internal::kEmptyString) {
        auth_->clear();
      }
    }
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string auth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth().data(), this->auth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string auth = 1;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->auth(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string auth = 1;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string auth = 1;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeListRequest::MergeFrom(const TictactoeListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth()) {
      set_auth(from.auth());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeListRequest::CopyFrom(const TictactoeListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TictactoeListRequest::Swap(TictactoeListRequest* other) {
  if (other != this) {
    std::swap(auth_, other->auth_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeListRequest_descriptor_;
  metadata.reflection = TictactoeListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeListReply::kTypeFieldNumber;
const int TictactoeListReply::kCreatorIdFieldNumber;
const int TictactoeListReply::kCreatorNameFieldNumber;
const int TictactoeListReply::kCreatorAvatarFieldNumber;
const int TictactoeListReply::kIpFieldNumber;
#endif  // !_MSC_VER

TictactoeListReply::TictactoeListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeListReply::InitAsDefaultInstance() {
}

TictactoeListReply::TictactoeListReply(const TictactoeListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeListReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeListReply::~TictactoeListReply() {
  SharedDtor();
}

void TictactoeListReply::SharedDtor() {
  if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_id_;
  }
  if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_name_;
  }
  if (creator_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_avatar_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void TictactoeListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeListReply_descriptor_;
}

const TictactoeListReply& TictactoeListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeListReply* TictactoeListReply::default_instance_ = NULL;

TictactoeListReply* TictactoeListReply::New() const {
  return new TictactoeListReply;
}

void TictactoeListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_creator_id()) {
      if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
        creator_id_->clear();
      }
    }
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
        creator_name_->clear();
      }
    }
    if (has_creator_avatar()) {
      if (creator_avatar_ != &::google::protobuf::internal::kEmptyString) {
        creator_avatar_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creator_id;
        break;
      }

      // required string creator_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator_id().data(), this->creator_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator_name().data(), this->creator_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_creator_avatar;
        break;
      }

      // optional string creator_avatar = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator_avatar().data(), this->creator_avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // required string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string creator_id = 2;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_id().data(), this->creator_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->creator_id(), output);
  }

  // required string creator_name = 3;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_name().data(), this->creator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->creator_name(), output);
  }

  // optional string creator_avatar = 4;
  if (has_creator_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_avatar().data(), this->creator_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->creator_avatar(), output);
  }

  // required string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string creator_id = 2;
  if (has_creator_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_id().data(), this->creator_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->creator_id(), target);
  }

  // required string creator_name = 3;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_name().data(), this->creator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creator_name(), target);
  }

  // optional string creator_avatar = 4;
  if (has_creator_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_avatar().data(), this->creator_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->creator_avatar(), target);
  }

  // required string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string creator_id = 2;
    if (has_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_id());
    }

    // required string creator_name = 3;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // optional string creator_avatar = 4;
    if (has_creator_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_avatar());
    }

    // required string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeListReply::MergeFrom(const TictactoeListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_creator_id()) {
      set_creator_id(from.creator_id());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_creator_avatar()) {
      set_creator_avatar(from.creator_avatar());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeListReply::CopyFrom(const TictactoeListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeListReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void TictactoeListReply::Swap(TictactoeListReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(creator_id_, other->creator_id_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(creator_avatar_, other->creator_avatar_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeListReply_descriptor_;
  metadata.reflection = TictactoeListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeLeaveRequest::kPlayerIdFieldNumber;
const int TictactoeLeaveRequest::kSessionIdFieldNumber;
#endif  // !_MSC_VER

TictactoeLeaveRequest::TictactoeLeaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeLeaveRequest::InitAsDefaultInstance() {
}

TictactoeLeaveRequest::TictactoeLeaveRequest(const TictactoeLeaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeLeaveRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeLeaveRequest::~TictactoeLeaveRequest() {
  SharedDtor();
}

void TictactoeLeaveRequest::SharedDtor() {
  if (player_id_ != &::google::protobuf::internal::kEmptyString) {
    delete player_id_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void TictactoeLeaveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeLeaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeLeaveRequest_descriptor_;
}

const TictactoeLeaveRequest& TictactoeLeaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeLeaveRequest* TictactoeLeaveRequest::default_instance_ = NULL;

TictactoeLeaveRequest* TictactoeLeaveRequest::New() const {
  return new TictactoeLeaveRequest;
}

void TictactoeLeaveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != &::google::protobuf::internal::kEmptyString) {
        player_id_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeLeaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_id().data(), this->player_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeLeaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player_id(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeLeaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeLeaveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_id());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeLeaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeLeaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeLeaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeLeaveRequest::MergeFrom(const TictactoeLeaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeLeaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeLeaveRequest::CopyFrom(const TictactoeLeaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeLeaveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TictactoeLeaveRequest::Swap(TictactoeLeaveRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeLeaveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeLeaveRequest_descriptor_;
  metadata.reflection = TictactoeLeaveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeLeavenReply::kTypeFieldNumber;
#endif  // !_MSC_VER

TictactoeLeavenReply::TictactoeLeavenReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeLeavenReply::InitAsDefaultInstance() {
}

TictactoeLeavenReply::TictactoeLeavenReply(const TictactoeLeavenReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeLeavenReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeLeavenReply::~TictactoeLeavenReply() {
  SharedDtor();
}

void TictactoeLeavenReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TictactoeLeavenReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeLeavenReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeLeavenReply_descriptor_;
}

const TictactoeLeavenReply& TictactoeLeavenReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeLeavenReply* TictactoeLeavenReply::default_instance_ = NULL;

TictactoeLeavenReply* TictactoeLeavenReply::New() const {
  return new TictactoeLeavenReply;
}

void TictactoeLeavenReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeLeavenReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeLeavenReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeLeavenReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeLeavenReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeLeavenReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeLeavenReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeLeavenReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeLeavenReply::MergeFrom(const TictactoeLeavenReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeLeavenReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeLeavenReply::CopyFrom(const TictactoeLeavenReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeLeavenReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TictactoeLeavenReply::Swap(TictactoeLeavenReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeLeavenReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeLeavenReply_descriptor_;
  metadata.reflection = TictactoeLeavenReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeMoveRequest::kAuthFieldNumber;
const int TictactoeMoveRequest::kSessionIdFieldNumber;
#endif  // !_MSC_VER

TictactoeMoveRequest::TictactoeMoveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeMoveRequest::InitAsDefaultInstance() {
}

TictactoeMoveRequest::TictactoeMoveRequest(const TictactoeMoveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeMoveRequest::SharedCtor() {
  _cached_size_ = 0;
  auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeMoveRequest::~TictactoeMoveRequest() {
  SharedDtor();
}

void TictactoeMoveRequest::SharedDtor() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void TictactoeMoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeMoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeMoveRequest_descriptor_;
}

const TictactoeMoveRequest& TictactoeMoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeMoveRequest* TictactoeMoveRequest::default_instance_ = NULL;

TictactoeMoveRequest* TictactoeMoveRequest::New() const {
  return new TictactoeMoveRequest;
}

void TictactoeMoveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_auth()) {
      if (auth_ != &::google::protobuf::internal::kEmptyString) {
        auth_->clear();
      }
    }
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeMoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string auth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth().data(), this->auth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeMoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string auth = 1;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->auth(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeMoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string auth = 1;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeMoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string auth = 1;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeMoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeMoveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeMoveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeMoveRequest::MergeFrom(const TictactoeMoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth()) {
      set_auth(from.auth());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeMoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeMoveRequest::CopyFrom(const TictactoeMoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeMoveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TictactoeMoveRequest::Swap(TictactoeMoveRequest* other) {
  if (other != this) {
    std::swap(auth_, other->auth_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeMoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeMoveRequest_descriptor_;
  metadata.reflection = TictactoeMoveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TictactoeMoveReply::kTypeFieldNumber;
#endif  // !_MSC_VER

TictactoeMoveReply::TictactoeMoveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TictactoeMoveReply::InitAsDefaultInstance() {
}

TictactoeMoveReply::TictactoeMoveReply(const TictactoeMoveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TictactoeMoveReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TictactoeMoveReply::~TictactoeMoveReply() {
  SharedDtor();
}

void TictactoeMoveReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TictactoeMoveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TictactoeMoveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TictactoeMoveReply_descriptor_;
}

const TictactoeMoveReply& TictactoeMoveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

TictactoeMoveReply* TictactoeMoveReply::default_instance_ = NULL;

TictactoeMoveReply* TictactoeMoveReply::New() const {
  return new TictactoeMoveReply;
}

void TictactoeMoveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TictactoeMoveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TictactoeMoveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TictactoeMoveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TictactoeMoveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TictactoeMoveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TictactoeMoveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TictactoeMoveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TictactoeMoveReply::MergeFrom(const TictactoeMoveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TictactoeMoveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TictactoeMoveReply::CopyFrom(const TictactoeMoveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TictactoeMoveReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TictactoeMoveReply::Swap(TictactoeMoveReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TictactoeMoveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TictactoeMoveReply_descriptor_;
  metadata.reflection = TictactoeMoveReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
