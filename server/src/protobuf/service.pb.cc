// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ServiceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceType_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ErrorType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorType_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2eproto() {
  protobuf_AddDesc_service_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceType_descriptor_ = file->message_type(0);
  static const int ServiceType_offsets_[1] = {
  };
  ServiceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceType_descriptor_,
      ServiceType::default_instance_,
      ServiceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceType));
  ServiceType_Type_descriptor_ = ServiceType_descriptor_->enum_type(0);
  ErrorType_descriptor_ = file->message_type(1);
  static const int ErrorType_offsets_[1] = {
  };
  ErrorType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorType_descriptor_,
      ErrorType::default_instance_,
      ErrorType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorType));
  ErrorType_Type_descriptor_ = ErrorType_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceType_descriptor_, &ServiceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorType_descriptor_, &ErrorType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2eproto() {
  delete ServiceType::default_instance_;
  delete ServiceType_reflection_;
  delete ErrorType::default_instance_;
  delete ErrorType_reflection_;
}

void protobuf_AddDesc_service_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rservice.proto\" \n\013ServiceType\"\021\n\004Type\022\t"
    "\n\005HELLO\020\001\"(\n\tErrorType\"\033\n\004Type\022\023\n\017INVALI"
    "D_REQUEST\020\001", 91);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service.proto", &protobuf_RegisterTypes);
  ServiceType::default_instance_ = new ServiceType();
  ErrorType::default_instance_ = new ErrorType();
  ServiceType::default_instance_->InitAsDefaultInstance();
  ErrorType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2eproto {
  StaticDescriptorInitializer_service_2eproto() {
    protobuf_AddDesc_service_2eproto();
  }
} static_descriptor_initializer_service_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ServiceType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceType_Type_descriptor_;
}
bool ServiceType_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServiceType_Type ServiceType::HELLO;
const ServiceType_Type ServiceType::Type_MIN;
const ServiceType_Type ServiceType::Type_MAX;
const int ServiceType::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ServiceType::ServiceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceType::InitAsDefaultInstance() {
}

ServiceType::ServiceType(const ServiceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceType::~ServiceType() {
  SharedDtor();
}

void ServiceType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceType_descriptor_;
}

const ServiceType& ServiceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

ServiceType* ServiceType::default_instance_ = NULL;

ServiceType* ServiceType::New() const {
  return new ServiceType;
}

void ServiceType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ServiceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceType::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceType::MergeFrom(const ServiceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceType::CopyFrom(const ServiceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceType::IsInitialized() const {

  return true;
}

void ServiceType::Swap(ServiceType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceType_descriptor_;
  metadata.reflection = ServiceType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ErrorType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorType_Type_descriptor_;
}
bool ErrorType_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ErrorType_Type ErrorType::INVALID_REQUEST;
const ErrorType_Type ErrorType::Type_MIN;
const ErrorType_Type ErrorType::Type_MAX;
const int ErrorType::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ErrorType::ErrorType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorType::InitAsDefaultInstance() {
}

ErrorType::ErrorType(const ErrorType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorType::~ErrorType() {
  SharedDtor();
}

void ErrorType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrorType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorType_descriptor_;
}

const ErrorType& ErrorType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

ErrorType* ErrorType::default_instance_ = NULL;

ErrorType* ErrorType::New() const {
  return new ErrorType;
}

void ErrorType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ErrorType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorType::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorType::MergeFrom(const ErrorType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorType::CopyFrom(const ErrorType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorType::IsInitialized() const {

  return true;
}

void ErrorType::Swap(ErrorType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorType_descriptor_;
  metadata.reflection = ErrorType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
