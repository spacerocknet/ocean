// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ocean {

namespace {

const ::google::protobuf::Descriptor* EntityType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EntityType_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RelationType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RelationType_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActivityType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivityType_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IndexType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IndexType_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EventType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EventType_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_type_2eproto() {
  protobuf_AddDesc_type_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "type.proto");
  GOOGLE_CHECK(file != NULL);
  EntityType_descriptor_ = file->message_type(0);
  static const int EntityType_offsets_[1] = {
  };
  EntityType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityType_descriptor_,
      EntityType::default_instance_,
      EntityType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityType));
  EntityType_Type_descriptor_ = EntityType_descriptor_->enum_type(0);
  RelationType_descriptor_ = file->message_type(1);
  static const int RelationType_offsets_[1] = {
  };
  RelationType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationType_descriptor_,
      RelationType::default_instance_,
      RelationType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationType));
  RelationType_Type_descriptor_ = RelationType_descriptor_->enum_type(0);
  ActivityType_descriptor_ = file->message_type(2);
  static const int ActivityType_offsets_[1] = {
  };
  ActivityType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityType_descriptor_,
      ActivityType::default_instance_,
      ActivityType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityType));
  ActivityType_Type_descriptor_ = ActivityType_descriptor_->enum_type(0);
  IndexType_descriptor_ = file->message_type(3);
  static const int IndexType_offsets_[1] = {
  };
  IndexType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexType_descriptor_,
      IndexType::default_instance_,
      IndexType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexType));
  IndexType_Type_descriptor_ = IndexType_descriptor_->enum_type(0);
  EventType_descriptor_ = file->message_type(4);
  static const int EventType_offsets_[1] = {
  };
  EventType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventType_descriptor_,
      EventType::default_instance_,
      EventType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventType));
  EventType_Type_descriptor_ = EventType_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_type_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityType_descriptor_, &EntityType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationType_descriptor_, &RelationType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityType_descriptor_, &ActivityType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexType_descriptor_, &IndexType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventType_descriptor_, &EventType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_type_2eproto() {
  delete EntityType::default_instance_;
  delete EntityType_reflection_;
  delete RelationType::default_instance_;
  delete RelationType_reflection_;
  delete ActivityType::default_instance_;
  delete ActivityType_reflection_;
  delete IndexType::default_instance_;
  delete IndexType_reflection_;
  delete EventType::default_instance_;
  delete EventType_reflection_;
}

void protobuf_AddDesc_type_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::model::protobuf_AddDesc_model_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntype.proto\022\005ocean\032\013model.proto\"J\n\nEnti"
    "tyType\"<\n\004Type\022\010\n\004GAME\020\001\022\013\n\007SESSION\020\002\022\n\n"
    "\006PLAYER\020\003\022\021\n\rADMINISTRATOR\020\004\"&\n\014Relation"
    "Type\"\026\n\004Type\022\016\n\nHAS_PLAYER\020\001\",\n\014Activity"
    "Type\"\034\n\004Type\022\n\n\006UPDATE\020\001\022\010\n\004PLAY\020\002\"6\n\tIn"
    "dexType\")\n\004Type\022\n\n\006ACTIVE\020\001\022\n\n\006PLAYER\020\002\022"
    "\t\n\005ADMIN\020\003\"\220\002\n\tEventType\"\202\002\n\004Type\022\017\n\013CRE"
    "ATE_GAME\020\001\022\017\n\013UPDATE_GAME\020\002\022\017\n\013DELETE_GA"
    "ME\020\003\022\022\n\016CREATE_SESSION\020\004\022\022\n\016UPDATE_SESSI"
    "ON\020\005\022\020\n\014JOIN_SESSION\020\006\022\021\n\rLEAVE_SESSION\020"
    "\007\022\017\n\013KICK_PLAYER\020\010\022\r\n\tPLAY_MOVE\020\t\022\017\n\013PLA"
    "Y_XXXXXX\020\t\022\021\n\rCREATE_PLAYER\020\n\022\021\n\rUPDATE_"
    "PLAYER\020\013\022\021\n\rDELETE_PLAYER\020\014\022\020\n\014BLOCK_PLA"
    "YER\020\r", 525);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "type.proto", &protobuf_RegisterTypes);
  EntityType::default_instance_ = new EntityType();
  RelationType::default_instance_ = new RelationType();
  ActivityType::default_instance_ = new ActivityType();
  IndexType::default_instance_ = new IndexType();
  EventType::default_instance_ = new EventType();
  EntityType::default_instance_->InitAsDefaultInstance();
  RelationType::default_instance_->InitAsDefaultInstance();
  ActivityType::default_instance_->InitAsDefaultInstance();
  IndexType::default_instance_->InitAsDefaultInstance();
  EventType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_type_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_type_2eproto {
  StaticDescriptorInitializer_type_2eproto() {
    protobuf_AddDesc_type_2eproto();
  }
} static_descriptor_initializer_type_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* EntityType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityType_Type_descriptor_;
}
bool EntityType_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EntityType_Type EntityType::GAME;
const EntityType_Type EntityType::SESSION;
const EntityType_Type EntityType::PLAYER;
const EntityType_Type EntityType::ADMINISTRATOR;
const EntityType_Type EntityType::Type_MIN;
const EntityType_Type EntityType::Type_MAX;
const int EntityType::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

EntityType::EntityType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityType::InitAsDefaultInstance() {
}

EntityType::EntityType(const EntityType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityType::~EntityType() {
  SharedDtor();
}

void EntityType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntityType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityType_descriptor_;
}

const EntityType& EntityType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

EntityType* EntityType::default_instance_ = NULL;

EntityType* EntityType::New() const {
  return new EntityType;
}

void EntityType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EntityType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityType::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityType::MergeFrom(const EntityType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityType::CopyFrom(const EntityType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityType::IsInitialized() const {

  return true;
}

void EntityType::Swap(EntityType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityType_descriptor_;
  metadata.reflection = EntityType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RelationType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationType_Type_descriptor_;
}
bool RelationType_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RelationType_Type RelationType::HAS_PLAYER;
const RelationType_Type RelationType::Type_MIN;
const RelationType_Type RelationType::Type_MAX;
const int RelationType::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

RelationType::RelationType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationType::InitAsDefaultInstance() {
}

RelationType::RelationType(const RelationType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationType::~RelationType() {
  SharedDtor();
}

void RelationType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationType_descriptor_;
}

const RelationType& RelationType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

RelationType* RelationType::default_instance_ = NULL;

RelationType* RelationType::New() const {
  return new RelationType;
}

void RelationType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RelationType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationType::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationType::MergeFrom(const RelationType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationType::CopyFrom(const RelationType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationType::IsInitialized() const {

  return true;
}

void RelationType::Swap(RelationType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationType_descriptor_;
  metadata.reflection = RelationType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ActivityType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityType_Type_descriptor_;
}
bool ActivityType_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ActivityType_Type ActivityType::UPDATE;
const ActivityType_Type ActivityType::PLAY;
const ActivityType_Type ActivityType::Type_MIN;
const ActivityType_Type ActivityType::Type_MAX;
const int ActivityType::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ActivityType::ActivityType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityType::InitAsDefaultInstance() {
}

ActivityType::ActivityType(const ActivityType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityType::~ActivityType() {
  SharedDtor();
}

void ActivityType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityType_descriptor_;
}

const ActivityType& ActivityType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

ActivityType* ActivityType::default_instance_ = NULL;

ActivityType* ActivityType::New() const {
  return new ActivityType;
}

void ActivityType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ActivityType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityType::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityType::MergeFrom(const ActivityType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityType::CopyFrom(const ActivityType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityType::IsInitialized() const {

  return true;
}

void ActivityType::Swap(ActivityType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityType_descriptor_;
  metadata.reflection = ActivityType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* IndexType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexType_Type_descriptor_;
}
bool IndexType_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const IndexType_Type IndexType::ACTIVE;
const IndexType_Type IndexType::PLAYER;
const IndexType_Type IndexType::ADMIN;
const IndexType_Type IndexType::Type_MIN;
const IndexType_Type IndexType::Type_MAX;
const int IndexType::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

IndexType::IndexType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndexType::InitAsDefaultInstance() {
}

IndexType::IndexType(const IndexType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexType::~IndexType() {
  SharedDtor();
}

void IndexType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexType_descriptor_;
}

const IndexType& IndexType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

IndexType* IndexType::default_instance_ = NULL;

IndexType* IndexType::New() const {
  return new IndexType;
}

void IndexType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IndexType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndexType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexType::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexType::MergeFrom(const IndexType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexType::CopyFrom(const IndexType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexType::IsInitialized() const {

  return true;
}

void IndexType::Swap(IndexType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexType_descriptor_;
  metadata.reflection = IndexType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EventType_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventType_Type_descriptor_;
}
bool EventType_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EventType_Type EventType::CREATE_GAME;
const EventType_Type EventType::UPDATE_GAME;
const EventType_Type EventType::DELETE_GAME;
const EventType_Type EventType::CREATE_SESSION;
const EventType_Type EventType::UPDATE_SESSION;
const EventType_Type EventType::JOIN_SESSION;
const EventType_Type EventType::LEAVE_SESSION;
const EventType_Type EventType::KICK_PLAYER;
const EventType_Type EventType::PLAY_MOVE;
const EventType_Type EventType::PLAY_XXXXXX;
const EventType_Type EventType::CREATE_PLAYER;
const EventType_Type EventType::UPDATE_PLAYER;
const EventType_Type EventType::DELETE_PLAYER;
const EventType_Type EventType::BLOCK_PLAYER;
const EventType_Type EventType::Type_MIN;
const EventType_Type EventType::Type_MAX;
const int EventType::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

EventType::EventType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventType::InitAsDefaultInstance() {
}

EventType::EventType(const EventType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventType::~EventType() {
  SharedDtor();
}

void EventType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventType_descriptor_;
}

const EventType& EventType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

EventType* EventType::default_instance_ = NULL;

EventType* EventType::New() const {
  return new EventType;
}

void EventType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EventType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventType::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventType::MergeFrom(const EventType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventType::CopyFrom(const EventType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventType::IsInitialized() const {

  return true;
}

void EventType::Swap(EventType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventType_descriptor_;
  metadata.reflection = EventType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ocean

// @@protoc_insertion_point(global_scope)
