// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_service_2eproto__INCLUDED
#define PROTOBUF_service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2eproto();
void protobuf_AssignDesc_service_2eproto();
void protobuf_ShutdownFile_service_2eproto();

class ServiceType;
class ErrorType;

enum ServiceType_Type {
  ServiceType_Type_HELLO = 1
};
bool ServiceType_Type_IsValid(int value);
const ServiceType_Type ServiceType_Type_Type_MIN = ServiceType_Type_HELLO;
const ServiceType_Type ServiceType_Type_Type_MAX = ServiceType_Type_HELLO;
const int ServiceType_Type_Type_ARRAYSIZE = ServiceType_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceType_Type_descriptor();
inline const ::std::string& ServiceType_Type_Name(ServiceType_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceType_Type_descriptor(), value);
}
inline bool ServiceType_Type_Parse(
    const ::std::string& name, ServiceType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceType_Type>(
    ServiceType_Type_descriptor(), name, value);
}
enum ErrorType_Type {
  ErrorType_Type_INVALID_REQUEST = 1
};
bool ErrorType_Type_IsValid(int value);
const ErrorType_Type ErrorType_Type_Type_MIN = ErrorType_Type_INVALID_REQUEST;
const ErrorType_Type ErrorType_Type_Type_MAX = ErrorType_Type_INVALID_REQUEST;
const int ErrorType_Type_Type_ARRAYSIZE = ErrorType_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorType_Type_descriptor();
inline const ::std::string& ErrorType_Type_Name(ErrorType_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorType_Type_descriptor(), value);
}
inline bool ErrorType_Type_Parse(
    const ::std::string& name, ErrorType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorType_Type>(
    ErrorType_Type_descriptor(), name, value);
}
// ===================================================================

class ServiceType : public ::google::protobuf::Message {
 public:
  ServiceType();
  virtual ~ServiceType();

  ServiceType(const ServiceType& from);

  inline ServiceType& operator=(const ServiceType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceType& default_instance();

  void Swap(ServiceType* other);

  // implements Message ----------------------------------------------

  ServiceType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceType& from);
  void MergeFrom(const ServiceType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServiceType_Type Type;
  static const Type HELLO = ServiceType_Type_HELLO;
  static inline bool Type_IsValid(int value) {
    return ServiceType_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ServiceType_Type_Type_MIN;
  static const Type Type_MAX =
    ServiceType_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ServiceType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ServiceType_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ServiceType_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ServiceType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ServiceType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static ServiceType* default_instance_;
};
// -------------------------------------------------------------------

class ErrorType : public ::google::protobuf::Message {
 public:
  ErrorType();
  virtual ~ErrorType();

  ErrorType(const ErrorType& from);

  inline ErrorType& operator=(const ErrorType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorType& default_instance();

  void Swap(ErrorType* other);

  // implements Message ----------------------------------------------

  ErrorType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorType& from);
  void MergeFrom(const ErrorType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ErrorType_Type Type;
  static const Type INVALID_REQUEST = ErrorType_Type_INVALID_REQUEST;
  static inline bool Type_IsValid(int value) {
    return ErrorType_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ErrorType_Type_Type_MIN;
  static const Type Type_MAX =
    ErrorType_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ErrorType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ErrorType_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ErrorType_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ErrorType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ErrorType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static ErrorType* default_instance_;
};
// ===================================================================


// ===================================================================

// ServiceType

// -------------------------------------------------------------------

// ErrorType


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServiceType_Type>() {
  return ::ServiceType_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ErrorType_Type>() {
  return ::ErrorType_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2eproto__INCLUDED
