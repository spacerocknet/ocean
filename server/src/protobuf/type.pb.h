// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#ifndef PROTOBUF_type_2eproto__INCLUDED
#define PROTOBUF_type_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "model.pb.h"
// @@protoc_insertion_point(includes)

namespace ocean {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_type_2eproto();
void protobuf_AssignDesc_type_2eproto();
void protobuf_ShutdownFile_type_2eproto();

class EntityType;
class RelationType;
class IndexType;

enum EntityType_Type {
  EntityType_Type_PLAYER = 1,
  EntityType_Type_TICTACTOE = 2
};
bool EntityType_Type_IsValid(int value);
const EntityType_Type EntityType_Type_Type_MIN = EntityType_Type_PLAYER;
const EntityType_Type EntityType_Type_Type_MAX = EntityType_Type_TICTACTOE;
const int EntityType_Type_Type_ARRAYSIZE = EntityType_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntityType_Type_descriptor();
inline const ::std::string& EntityType_Type_Name(EntityType_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntityType_Type_descriptor(), value);
}
inline bool EntityType_Type_Parse(
    const ::std::string& name, EntityType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityType_Type>(
    EntityType_Type_descriptor(), name, value);
}
enum RelationType_Type {
  RelationType_Type_HAS_TICTACTOE = 6
};
bool RelationType_Type_IsValid(int value);
const RelationType_Type RelationType_Type_Type_MIN = RelationType_Type_HAS_TICTACTOE;
const RelationType_Type RelationType_Type_Type_MAX = RelationType_Type_HAS_TICTACTOE;
const int RelationType_Type_Type_ARRAYSIZE = RelationType_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* RelationType_Type_descriptor();
inline const ::std::string& RelationType_Type_Name(RelationType_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RelationType_Type_descriptor(), value);
}
inline bool RelationType_Type_Parse(
    const ::std::string& name, RelationType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RelationType_Type>(
    RelationType_Type_descriptor(), name, value);
}
enum IndexType_Type {
  IndexType_Type_PLAYER = 1,
  IndexType_Type_TICTACTOE = 2
};
bool IndexType_Type_IsValid(int value);
const IndexType_Type IndexType_Type_Type_MIN = IndexType_Type_PLAYER;
const IndexType_Type IndexType_Type_Type_MAX = IndexType_Type_TICTACTOE;
const int IndexType_Type_Type_ARRAYSIZE = IndexType_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* IndexType_Type_descriptor();
inline const ::std::string& IndexType_Type_Name(IndexType_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    IndexType_Type_descriptor(), value);
}
inline bool IndexType_Type_Parse(
    const ::std::string& name, IndexType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndexType_Type>(
    IndexType_Type_descriptor(), name, value);
}
// ===================================================================

class EntityType : public ::google::protobuf::Message {
 public:
  EntityType();
  virtual ~EntityType();

  EntityType(const EntityType& from);

  inline EntityType& operator=(const EntityType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityType& default_instance();

  void Swap(EntityType* other);

  // implements Message ----------------------------------------------

  EntityType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityType& from);
  void MergeFrom(const EntityType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EntityType_Type Type;
  static const Type PLAYER = EntityType_Type_PLAYER;
  static const Type TICTACTOE = EntityType_Type_TICTACTOE;
  static inline bool Type_IsValid(int value) {
    return EntityType_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EntityType_Type_Type_MIN;
  static const Type Type_MAX =
    EntityType_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EntityType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EntityType_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EntityType_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EntityType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ocean.EntityType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static EntityType* default_instance_;
};
// -------------------------------------------------------------------

class RelationType : public ::google::protobuf::Message {
 public:
  RelationType();
  virtual ~RelationType();

  RelationType(const RelationType& from);

  inline RelationType& operator=(const RelationType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationType& default_instance();

  void Swap(RelationType* other);

  // implements Message ----------------------------------------------

  RelationType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelationType& from);
  void MergeFrom(const RelationType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RelationType_Type Type;
  static const Type HAS_TICTACTOE = RelationType_Type_HAS_TICTACTOE;
  static inline bool Type_IsValid(int value) {
    return RelationType_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RelationType_Type_Type_MIN;
  static const Type Type_MAX =
    RelationType_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RelationType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RelationType_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RelationType_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RelationType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ocean.RelationType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static RelationType* default_instance_;
};
// -------------------------------------------------------------------

class IndexType : public ::google::protobuf::Message {
 public:
  IndexType();
  virtual ~IndexType();

  IndexType(const IndexType& from);

  inline IndexType& operator=(const IndexType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexType& default_instance();

  void Swap(IndexType* other);

  // implements Message ----------------------------------------------

  IndexType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexType& from);
  void MergeFrom(const IndexType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndexType_Type Type;
  static const Type PLAYER = IndexType_Type_PLAYER;
  static const Type TICTACTOE = IndexType_Type_TICTACTOE;
  static inline bool Type_IsValid(int value) {
    return IndexType_Type_IsValid(value);
  }
  static const Type Type_MIN =
    IndexType_Type_Type_MIN;
  static const Type Type_MAX =
    IndexType_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    IndexType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return IndexType_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return IndexType_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return IndexType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ocean.IndexType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static IndexType* default_instance_;
};
// ===================================================================


// ===================================================================

// EntityType

// -------------------------------------------------------------------

// RelationType

// -------------------------------------------------------------------

// IndexType


// @@protoc_insertion_point(namespace_scope)

}  // namespace ocean

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ocean::EntityType_Type>() {
  return ::ocean::EntityType_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ocean::RelationType_Type>() {
  return ::ocean::RelationType_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ocean::IndexType_Type>() {
  return ::ocean::IndexType_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_type_2eproto__INCLUDED
