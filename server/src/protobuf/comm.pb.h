// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef PROTOBUF_comm_2eproto__INCLUDED
#define PROTOBUF_comm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_comm_2eproto();
void protobuf_AssignDesc_comm_2eproto();
void protobuf_ShutdownFile_comm_2eproto();

class SigninRequest;
class SigninReply;
class TictactoeCreateRequest;
class TictactoeCreateReply;
class TictactoeJoinRequest;
class TictactoeJoinReply;
class TictactoeListRequest;
class TictactoeListReply;
class TictactoeLeaveRequest;
class LeaveSessionReply;

enum ServiceType {
  SIGNIN = 100,
  SIGNOUT = 101,
  TICTACTOE_CREATE = 200,
  TICTACTOE_JOIN = 201,
  TICTACTOE_MOVE = 202
};
bool ServiceType_IsValid(int value);
const ServiceType ServiceType_MIN = SIGNIN;
const ServiceType ServiceType_MAX = TICTACTOE_MOVE;
const int ServiceType_ARRAYSIZE = ServiceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceType_descriptor();
inline const ::std::string& ServiceType_Name(ServiceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceType_descriptor(), value);
}
inline bool ServiceType_Parse(
    const ::std::string& name, ServiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceType>(
    ServiceType_descriptor(), name, value);
}
enum ErrorType {
  OK = 0,
  DB_ERROR = 1,
  INVALID_REQUEST = 2,
  ENTITY_INVALID = 3,
  ENTITY_NOT_FOUND = 4,
  UID_INVALID = 5,
  COMMIT_ERROR = 6,
  PASSWORD_INVALID = 7,
  UID_DUPLICATED = 9
};
bool ErrorType_IsValid(int value);
const ErrorType ErrorType_MIN = OK;
const ErrorType ErrorType_MAX = UID_DUPLICATED;
const int ErrorType_ARRAYSIZE = ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor();
inline const ::std::string& ErrorType_Name(ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorType_descriptor(), value);
}
inline bool ErrorType_Parse(
    const ::std::string& name, ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorType>(
    ErrorType_descriptor(), name, value);
}
// ===================================================================

class SigninRequest : public ::google::protobuf::Message {
 public:
  SigninRequest();
  virtual ~SigninRequest();

  SigninRequest(const SigninRequest& from);

  inline SigninRequest& operator=(const SigninRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigninRequest& default_instance();

  void Swap(SigninRequest* other);

  // implements Message ----------------------------------------------

  SigninRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigninRequest& from);
  void MergeFrom(const SigninRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:comm.SigninRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static SigninRequest* default_instance_;
};
// -------------------------------------------------------------------

class SigninReply : public ::google::protobuf::Message {
 public:
  SigninReply();
  virtual ~SigninReply();

  SigninReply(const SigninReply& from);

  inline SigninReply& operator=(const SigninReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigninReply& default_instance();

  void Swap(SigninReply* other);

  // implements Message ----------------------------------------------

  SigninReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigninReply& from);
  void MergeFrom(const SigninReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string auth = 2;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 2;
  inline const ::std::string& auth() const;
  inline void set_auth(const ::std::string& value);
  inline void set_auth(const char* value);
  inline void set_auth(const char* value, size_t size);
  inline ::std::string* mutable_auth();
  inline ::std::string* release_auth();
  inline void set_allocated_auth(::std::string* auth);

  // @@protoc_insertion_point(class_scope:comm.SigninReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_auth();
  inline void clear_has_auth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* auth_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static SigninReply* default_instance_;
};
// -------------------------------------------------------------------

class TictactoeCreateRequest : public ::google::protobuf::Message {
 public:
  TictactoeCreateRequest();
  virtual ~TictactoeCreateRequest();

  TictactoeCreateRequest(const TictactoeCreateRequest& from);

  inline TictactoeCreateRequest& operator=(const TictactoeCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TictactoeCreateRequest& default_instance();

  void Swap(TictactoeCreateRequest* other);

  // implements Message ----------------------------------------------

  TictactoeCreateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TictactoeCreateRequest& from);
  void MergeFrom(const TictactoeCreateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string auth = 1;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 1;
  inline const ::std::string& auth() const;
  inline void set_auth(const ::std::string& value);
  inline void set_auth(const char* value);
  inline void set_auth(const char* value, size_t size);
  inline ::std::string* mutable_auth();
  inline ::std::string* release_auth();
  inline void set_allocated_auth(::std::string* auth);

  // @@protoc_insertion_point(class_scope:comm.TictactoeCreateRequest)
 private:
  inline void set_has_auth();
  inline void clear_has_auth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* auth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static TictactoeCreateRequest* default_instance_;
};
// -------------------------------------------------------------------

class TictactoeCreateReply : public ::google::protobuf::Message {
 public:
  TictactoeCreateReply();
  virtual ~TictactoeCreateReply();

  TictactoeCreateReply(const TictactoeCreateReply& from);

  inline TictactoeCreateReply& operator=(const TictactoeCreateReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TictactoeCreateReply& default_instance();

  void Swap(TictactoeCreateReply* other);

  // implements Message ----------------------------------------------

  TictactoeCreateReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TictactoeCreateReply& from);
  void MergeFrom(const TictactoeCreateReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:comm.TictactoeCreateReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;
  ::std::string* ip_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static TictactoeCreateReply* default_instance_;
};
// -------------------------------------------------------------------

class TictactoeJoinRequest : public ::google::protobuf::Message {
 public:
  TictactoeJoinRequest();
  virtual ~TictactoeJoinRequest();

  TictactoeJoinRequest(const TictactoeJoinRequest& from);

  inline TictactoeJoinRequest& operator=(const TictactoeJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TictactoeJoinRequest& default_instance();

  void Swap(TictactoeJoinRequest* other);

  // implements Message ----------------------------------------------

  TictactoeJoinRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TictactoeJoinRequest& from);
  void MergeFrom(const TictactoeJoinRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string auth = 1;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 1;
  inline const ::std::string& auth() const;
  inline void set_auth(const ::std::string& value);
  inline void set_auth(const char* value);
  inline void set_auth(const char* value, size_t size);
  inline ::std::string* mutable_auth();
  inline ::std::string* release_auth();
  inline void set_allocated_auth(::std::string* auth);

  // @@protoc_insertion_point(class_scope:comm.TictactoeJoinRequest)
 private:
  inline void set_has_auth();
  inline void clear_has_auth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* auth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static TictactoeJoinRequest* default_instance_;
};
// -------------------------------------------------------------------

class TictactoeJoinReply : public ::google::protobuf::Message {
 public:
  TictactoeJoinReply();
  virtual ~TictactoeJoinReply();

  TictactoeJoinReply(const TictactoeJoinReply& from);

  inline TictactoeJoinReply& operator=(const TictactoeJoinReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TictactoeJoinReply& default_instance();

  void Swap(TictactoeJoinReply* other);

  // implements Message ----------------------------------------------

  TictactoeJoinReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TictactoeJoinReply& from);
  void MergeFrom(const TictactoeJoinReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string creator_id = 2;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 2;
  inline const ::std::string& creator_id() const;
  inline void set_creator_id(const ::std::string& value);
  inline void set_creator_id(const char* value);
  inline void set_creator_id(const char* value, size_t size);
  inline ::std::string* mutable_creator_id();
  inline ::std::string* release_creator_id();
  inline void set_allocated_creator_id(::std::string* creator_id);

  // required string creator_name = 3;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 3;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // optional string creator_avatar = 4;
  inline bool has_creator_avatar() const;
  inline void clear_creator_avatar();
  static const int kCreatorAvatarFieldNumber = 4;
  inline const ::std::string& creator_avatar() const;
  inline void set_creator_avatar(const ::std::string& value);
  inline void set_creator_avatar(const char* value);
  inline void set_creator_avatar(const char* value, size_t size);
  inline ::std::string* mutable_creator_avatar();
  inline ::std::string* release_creator_avatar();
  inline void set_allocated_creator_avatar(::std::string* creator_avatar);

  // @@protoc_insertion_point(class_scope:comm.TictactoeJoinReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_creator_avatar();
  inline void clear_has_creator_avatar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* creator_id_;
  ::std::string* creator_name_;
  ::std::string* creator_avatar_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static TictactoeJoinReply* default_instance_;
};
// -------------------------------------------------------------------

class TictactoeListRequest : public ::google::protobuf::Message {
 public:
  TictactoeListRequest();
  virtual ~TictactoeListRequest();

  TictactoeListRequest(const TictactoeListRequest& from);

  inline TictactoeListRequest& operator=(const TictactoeListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TictactoeListRequest& default_instance();

  void Swap(TictactoeListRequest* other);

  // implements Message ----------------------------------------------

  TictactoeListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TictactoeListRequest& from);
  void MergeFrom(const TictactoeListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string auth = 1;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 1;
  inline const ::std::string& auth() const;
  inline void set_auth(const ::std::string& value);
  inline void set_auth(const char* value);
  inline void set_auth(const char* value, size_t size);
  inline ::std::string* mutable_auth();
  inline ::std::string* release_auth();
  inline void set_allocated_auth(::std::string* auth);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:comm.TictactoeListRequest)
 private:
  inline void set_has_auth();
  inline void clear_has_auth();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* auth_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static TictactoeListRequest* default_instance_;
};
// -------------------------------------------------------------------

class TictactoeListReply : public ::google::protobuf::Message {
 public:
  TictactoeListReply();
  virtual ~TictactoeListReply();

  TictactoeListReply(const TictactoeListReply& from);

  inline TictactoeListReply& operator=(const TictactoeListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TictactoeListReply& default_instance();

  void Swap(TictactoeListReply* other);

  // implements Message ----------------------------------------------

  TictactoeListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TictactoeListReply& from);
  void MergeFrom(const TictactoeListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string creator_id = 2;
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 2;
  inline const ::std::string& creator_id() const;
  inline void set_creator_id(const ::std::string& value);
  inline void set_creator_id(const char* value);
  inline void set_creator_id(const char* value, size_t size);
  inline ::std::string* mutable_creator_id();
  inline ::std::string* release_creator_id();
  inline void set_allocated_creator_id(::std::string* creator_id);

  // required string creator_name = 3;
  inline bool has_creator_name() const;
  inline void clear_creator_name();
  static const int kCreatorNameFieldNumber = 3;
  inline const ::std::string& creator_name() const;
  inline void set_creator_name(const ::std::string& value);
  inline void set_creator_name(const char* value);
  inline void set_creator_name(const char* value, size_t size);
  inline ::std::string* mutable_creator_name();
  inline ::std::string* release_creator_name();
  inline void set_allocated_creator_name(::std::string* creator_name);

  // optional string creator_avatar = 4;
  inline bool has_creator_avatar() const;
  inline void clear_creator_avatar();
  static const int kCreatorAvatarFieldNumber = 4;
  inline const ::std::string& creator_avatar() const;
  inline void set_creator_avatar(const ::std::string& value);
  inline void set_creator_avatar(const char* value);
  inline void set_creator_avatar(const char* value, size_t size);
  inline ::std::string* mutable_creator_avatar();
  inline ::std::string* release_creator_avatar();
  inline void set_allocated_creator_avatar(::std::string* creator_avatar);

  // required string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:comm.TictactoeListReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_creator_name();
  inline void clear_has_creator_name();
  inline void set_has_creator_avatar();
  inline void clear_has_creator_avatar();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* creator_id_;
  ::std::string* creator_name_;
  ::std::string* creator_avatar_;
  ::std::string* ip_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static TictactoeListReply* default_instance_;
};
// -------------------------------------------------------------------

class TictactoeLeaveRequest : public ::google::protobuf::Message {
 public:
  TictactoeLeaveRequest();
  virtual ~TictactoeLeaveRequest();

  TictactoeLeaveRequest(const TictactoeLeaveRequest& from);

  inline TictactoeLeaveRequest& operator=(const TictactoeLeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TictactoeLeaveRequest& default_instance();

  void Swap(TictactoeLeaveRequest* other);

  // implements Message ----------------------------------------------

  TictactoeLeaveRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TictactoeLeaveRequest& from);
  void MergeFrom(const TictactoeLeaveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:comm.TictactoeLeaveRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static TictactoeLeaveRequest* default_instance_;
};
// -------------------------------------------------------------------

class LeaveSessionReply : public ::google::protobuf::Message {
 public:
  LeaveSessionReply();
  virtual ~LeaveSessionReply();

  LeaveSessionReply(const LeaveSessionReply& from);

  inline LeaveSessionReply& operator=(const LeaveSessionReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveSessionReply& default_instance();

  void Swap(LeaveSessionReply* other);

  // implements Message ----------------------------------------------

  LeaveSessionReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveSessionReply& from);
  void MergeFrom(const LeaveSessionReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:comm.LeaveSessionReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();

  void InitAsDefaultInstance();
  static LeaveSessionReply* default_instance_;
};
// ===================================================================


// ===================================================================

// SigninRequest

// required string uid = 1;
inline bool SigninRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigninRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigninRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigninRequest::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& SigninRequest::uid() const {
  return *uid_;
}
inline void SigninRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SigninRequest::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void SigninRequest::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SigninRequest::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* SigninRequest::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SigninRequest::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool SigninRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SigninRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SigninRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SigninRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SigninRequest::password() const {
  return *password_;
}
inline void SigninRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SigninRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SigninRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SigninRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* SigninRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SigninRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SigninReply

// required int32 type = 1;
inline bool SigninReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigninReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigninReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigninReply::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SigninReply::type() const {
  return type_;
}
inline void SigninReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string auth = 2;
inline bool SigninReply::has_auth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SigninReply::set_has_auth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SigninReply::clear_has_auth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SigninReply::clear_auth() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    auth_->clear();
  }
  clear_has_auth();
}
inline const ::std::string& SigninReply::auth() const {
  return *auth_;
}
inline void SigninReply::set_auth(const ::std::string& value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void SigninReply::set_auth(const char* value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void SigninReply::set_auth(const char* value, size_t size) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SigninReply::mutable_auth() {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  return auth_;
}
inline ::std::string* SigninReply::release_auth() {
  clear_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_;
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SigninReply::set_allocated_auth(::std::string* auth) {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (auth) {
    set_has_auth();
    auth_ = auth;
  } else {
    clear_has_auth();
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TictactoeCreateRequest

// required string auth = 1;
inline bool TictactoeCreateRequest::has_auth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TictactoeCreateRequest::set_has_auth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TictactoeCreateRequest::clear_has_auth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TictactoeCreateRequest::clear_auth() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    auth_->clear();
  }
  clear_has_auth();
}
inline const ::std::string& TictactoeCreateRequest::auth() const {
  return *auth_;
}
inline void TictactoeCreateRequest::set_auth(const ::std::string& value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void TictactoeCreateRequest::set_auth(const char* value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void TictactoeCreateRequest::set_auth(const char* value, size_t size) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeCreateRequest::mutable_auth() {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  return auth_;
}
inline ::std::string* TictactoeCreateRequest::release_auth() {
  clear_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_;
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeCreateRequest::set_allocated_auth(::std::string* auth) {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (auth) {
    set_has_auth();
    auth_ = auth;
  } else {
    clear_has_auth();
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TictactoeCreateReply

// required int32 type = 1;
inline bool TictactoeCreateReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TictactoeCreateReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TictactoeCreateReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TictactoeCreateReply::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TictactoeCreateReply::type() const {
  return type_;
}
inline void TictactoeCreateReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string session_id = 2;
inline bool TictactoeCreateReply::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TictactoeCreateReply::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TictactoeCreateReply::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TictactoeCreateReply::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& TictactoeCreateReply::session_id() const {
  return *session_id_;
}
inline void TictactoeCreateReply::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void TictactoeCreateReply::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void TictactoeCreateReply::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeCreateReply::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* TictactoeCreateReply::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeCreateReply::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 3;
inline bool TictactoeCreateReply::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TictactoeCreateReply::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TictactoeCreateReply::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TictactoeCreateReply::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& TictactoeCreateReply::ip() const {
  return *ip_;
}
inline void TictactoeCreateReply::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TictactoeCreateReply::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TictactoeCreateReply::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeCreateReply::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* TictactoeCreateReply::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeCreateReply::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TictactoeJoinRequest

// required string auth = 1;
inline bool TictactoeJoinRequest::has_auth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TictactoeJoinRequest::set_has_auth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TictactoeJoinRequest::clear_has_auth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TictactoeJoinRequest::clear_auth() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    auth_->clear();
  }
  clear_has_auth();
}
inline const ::std::string& TictactoeJoinRequest::auth() const {
  return *auth_;
}
inline void TictactoeJoinRequest::set_auth(const ::std::string& value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void TictactoeJoinRequest::set_auth(const char* value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void TictactoeJoinRequest::set_auth(const char* value, size_t size) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeJoinRequest::mutable_auth() {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  return auth_;
}
inline ::std::string* TictactoeJoinRequest::release_auth() {
  clear_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_;
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeJoinRequest::set_allocated_auth(::std::string* auth) {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (auth) {
    set_has_auth();
    auth_ = auth;
  } else {
    clear_has_auth();
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TictactoeJoinReply

// required int32 type = 1;
inline bool TictactoeJoinReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TictactoeJoinReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TictactoeJoinReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TictactoeJoinReply::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TictactoeJoinReply::type() const {
  return type_;
}
inline void TictactoeJoinReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string creator_id = 2;
inline bool TictactoeJoinReply::has_creator_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TictactoeJoinReply::set_has_creator_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TictactoeJoinReply::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TictactoeJoinReply::clear_creator_id() {
  if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
    creator_id_->clear();
  }
  clear_has_creator_id();
}
inline const ::std::string& TictactoeJoinReply::creator_id() const {
  return *creator_id_;
}
inline void TictactoeJoinReply::set_creator_id(const ::std::string& value) {
  set_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    creator_id_ = new ::std::string;
  }
  creator_id_->assign(value);
}
inline void TictactoeJoinReply::set_creator_id(const char* value) {
  set_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    creator_id_ = new ::std::string;
  }
  creator_id_->assign(value);
}
inline void TictactoeJoinReply::set_creator_id(const char* value, size_t size) {
  set_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    creator_id_ = new ::std::string;
  }
  creator_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeJoinReply::mutable_creator_id() {
  set_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    creator_id_ = new ::std::string;
  }
  return creator_id_;
}
inline ::std::string* TictactoeJoinReply::release_creator_id() {
  clear_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creator_id_;
    creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeJoinReply::set_allocated_creator_id(::std::string* creator_id) {
  if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_id_;
  }
  if (creator_id) {
    set_has_creator_id();
    creator_id_ = creator_id;
  } else {
    clear_has_creator_id();
    creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string creator_name = 3;
inline bool TictactoeJoinReply::has_creator_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TictactoeJoinReply::set_has_creator_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TictactoeJoinReply::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TictactoeJoinReply::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& TictactoeJoinReply::creator_name() const {
  return *creator_name_;
}
inline void TictactoeJoinReply::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
}
inline void TictactoeJoinReply::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
}
inline void TictactoeJoinReply::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeJoinReply::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    creator_name_ = new ::std::string;
  }
  return creator_name_;
}
inline ::std::string* TictactoeJoinReply::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeJoinReply::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creator_avatar = 4;
inline bool TictactoeJoinReply::has_creator_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TictactoeJoinReply::set_has_creator_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TictactoeJoinReply::clear_has_creator_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TictactoeJoinReply::clear_creator_avatar() {
  if (creator_avatar_ != &::google::protobuf::internal::kEmptyString) {
    creator_avatar_->clear();
  }
  clear_has_creator_avatar();
}
inline const ::std::string& TictactoeJoinReply::creator_avatar() const {
  return *creator_avatar_;
}
inline void TictactoeJoinReply::set_creator_avatar(const ::std::string& value) {
  set_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    creator_avatar_ = new ::std::string;
  }
  creator_avatar_->assign(value);
}
inline void TictactoeJoinReply::set_creator_avatar(const char* value) {
  set_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    creator_avatar_ = new ::std::string;
  }
  creator_avatar_->assign(value);
}
inline void TictactoeJoinReply::set_creator_avatar(const char* value, size_t size) {
  set_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    creator_avatar_ = new ::std::string;
  }
  creator_avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeJoinReply::mutable_creator_avatar() {
  set_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    creator_avatar_ = new ::std::string;
  }
  return creator_avatar_;
}
inline ::std::string* TictactoeJoinReply::release_creator_avatar() {
  clear_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creator_avatar_;
    creator_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeJoinReply::set_allocated_creator_avatar(::std::string* creator_avatar) {
  if (creator_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_avatar_;
  }
  if (creator_avatar) {
    set_has_creator_avatar();
    creator_avatar_ = creator_avatar;
  } else {
    clear_has_creator_avatar();
    creator_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TictactoeListRequest

// required string auth = 1;
inline bool TictactoeListRequest::has_auth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TictactoeListRequest::set_has_auth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TictactoeListRequest::clear_has_auth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TictactoeListRequest::clear_auth() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    auth_->clear();
  }
  clear_has_auth();
}
inline const ::std::string& TictactoeListRequest::auth() const {
  return *auth_;
}
inline void TictactoeListRequest::set_auth(const ::std::string& value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void TictactoeListRequest::set_auth(const char* value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void TictactoeListRequest::set_auth(const char* value, size_t size) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeListRequest::mutable_auth() {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  return auth_;
}
inline ::std::string* TictactoeListRequest::release_auth() {
  clear_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_;
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeListRequest::set_allocated_auth(::std::string* auth) {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (auth) {
    set_has_auth();
    auth_ = auth;
  } else {
    clear_has_auth();
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 count = 2;
inline bool TictactoeListRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TictactoeListRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TictactoeListRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TictactoeListRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TictactoeListRequest::count() const {
  return count_;
}
inline void TictactoeListRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// TictactoeListReply

// required int32 type = 1;
inline bool TictactoeListReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TictactoeListReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TictactoeListReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TictactoeListReply::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TictactoeListReply::type() const {
  return type_;
}
inline void TictactoeListReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string creator_id = 2;
inline bool TictactoeListReply::has_creator_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TictactoeListReply::set_has_creator_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TictactoeListReply::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TictactoeListReply::clear_creator_id() {
  if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
    creator_id_->clear();
  }
  clear_has_creator_id();
}
inline const ::std::string& TictactoeListReply::creator_id() const {
  return *creator_id_;
}
inline void TictactoeListReply::set_creator_id(const ::std::string& value) {
  set_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    creator_id_ = new ::std::string;
  }
  creator_id_->assign(value);
}
inline void TictactoeListReply::set_creator_id(const char* value) {
  set_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    creator_id_ = new ::std::string;
  }
  creator_id_->assign(value);
}
inline void TictactoeListReply::set_creator_id(const char* value, size_t size) {
  set_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    creator_id_ = new ::std::string;
  }
  creator_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeListReply::mutable_creator_id() {
  set_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    creator_id_ = new ::std::string;
  }
  return creator_id_;
}
inline ::std::string* TictactoeListReply::release_creator_id() {
  clear_has_creator_id();
  if (creator_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creator_id_;
    creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeListReply::set_allocated_creator_id(::std::string* creator_id) {
  if (creator_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_id_;
  }
  if (creator_id) {
    set_has_creator_id();
    creator_id_ = creator_id;
  } else {
    clear_has_creator_id();
    creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string creator_name = 3;
inline bool TictactoeListReply::has_creator_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TictactoeListReply::set_has_creator_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TictactoeListReply::clear_has_creator_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TictactoeListReply::clear_creator_name() {
  if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
    creator_name_->clear();
  }
  clear_has_creator_name();
}
inline const ::std::string& TictactoeListReply::creator_name() const {
  return *creator_name_;
}
inline void TictactoeListReply::set_creator_name(const ::std::string& value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
}
inline void TictactoeListReply::set_creator_name(const char* value) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(value);
}
inline void TictactoeListReply::set_creator_name(const char* value, size_t size) {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    creator_name_ = new ::std::string;
  }
  creator_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeListReply::mutable_creator_name() {
  set_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    creator_name_ = new ::std::string;
  }
  return creator_name_;
}
inline ::std::string* TictactoeListReply::release_creator_name() {
  clear_has_creator_name();
  if (creator_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creator_name_;
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeListReply::set_allocated_creator_name(::std::string* creator_name) {
  if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_name_;
  }
  if (creator_name) {
    set_has_creator_name();
    creator_name_ = creator_name;
  } else {
    clear_has_creator_name();
    creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creator_avatar = 4;
inline bool TictactoeListReply::has_creator_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TictactoeListReply::set_has_creator_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TictactoeListReply::clear_has_creator_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TictactoeListReply::clear_creator_avatar() {
  if (creator_avatar_ != &::google::protobuf::internal::kEmptyString) {
    creator_avatar_->clear();
  }
  clear_has_creator_avatar();
}
inline const ::std::string& TictactoeListReply::creator_avatar() const {
  return *creator_avatar_;
}
inline void TictactoeListReply::set_creator_avatar(const ::std::string& value) {
  set_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    creator_avatar_ = new ::std::string;
  }
  creator_avatar_->assign(value);
}
inline void TictactoeListReply::set_creator_avatar(const char* value) {
  set_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    creator_avatar_ = new ::std::string;
  }
  creator_avatar_->assign(value);
}
inline void TictactoeListReply::set_creator_avatar(const char* value, size_t size) {
  set_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    creator_avatar_ = new ::std::string;
  }
  creator_avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeListReply::mutable_creator_avatar() {
  set_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    creator_avatar_ = new ::std::string;
  }
  return creator_avatar_;
}
inline ::std::string* TictactoeListReply::release_creator_avatar() {
  clear_has_creator_avatar();
  if (creator_avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creator_avatar_;
    creator_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeListReply::set_allocated_creator_avatar(::std::string* creator_avatar) {
  if (creator_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_avatar_;
  }
  if (creator_avatar) {
    set_has_creator_avatar();
    creator_avatar_ = creator_avatar;
  } else {
    clear_has_creator_avatar();
    creator_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 5;
inline bool TictactoeListReply::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TictactoeListReply::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TictactoeListReply::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TictactoeListReply::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& TictactoeListReply::ip() const {
  return *ip_;
}
inline void TictactoeListReply::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TictactoeListReply::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TictactoeListReply::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TictactoeListReply::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* TictactoeListReply::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TictactoeListReply::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TictactoeLeaveRequest

// -------------------------------------------------------------------

// LeaveSessionReply

// required int32 type = 1;
inline bool LeaveSessionReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveSessionReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveSessionReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveSessionReply::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LeaveSessionReply::type() const {
  return type_;
}
inline void LeaveSessionReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comm::ServiceType>() {
  return ::comm::ServiceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comm::ErrorType>() {
  return ::comm::ErrorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_comm_2eproto__INCLUDED
